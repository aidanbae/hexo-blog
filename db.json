{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/img/header_img/Iron-Man-3.jpg","path":"img/header_img/Iron-Man-3.jpg","modified":0,"renderable":0},{"_id":"source/img/ironman-draw.png","path":"img/ironman-draw.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"source/img/header_img/tf-logo-dark.png","path":"img/header_img/tf-logo-dark.png","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/beantech-desktop.png","path":"img/beantech-desktop.png","modified":0,"renderable":0},{"_id":"source/img/header_img/tag-bg.png","path":"img/header_img/tag-bg.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-2-dark.png","path":"img/header_img/home-bg-2-dark.png","modified":0,"renderable":0},{"_id":"source/img/header_img/archive-bg.png","path":"img/header_img/archive-bg.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1496944664000},{"_id":"themes/beantech/.DS_Store","hash":"ed011c08cb234d64eb4501f439179b6f557cf790","modified":1511272009000},{"_id":"source/.DS_Store","hash":"731c64123e53283061b50e75377a64d408fd508b","modified":1517468837632},{"_id":"source/CNAME","hash":"55d5b0b4757a7d65ee4966dd161f394d06d257b7","modified":1496944664000},{"_id":"themes/beantech/_config.yml","hash":"6afd65c055d9b1c70ae67323cc869f1b4aa60348","modified":1496944664000},{"_id":"themes/beantech/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1496944664000},{"_id":"source/about/index.md","hash":"7439cd1248c6454d0d3dbd064a3e3f55d15275c7","modified":1516873860619},{"_id":"source/archive/index.md","hash":"279ff19668395f5c6b26417da99d2c1f3ecd5886","modified":1496944664000},{"_id":"source/_posts/golang-design-p-01.md","hash":"e12400705ed0751c781ebb5798e96c35ad8b2e01","modified":1521803453568},{"_id":"source/_posts/golang-design-p-02.md","hash":"55be07ea55cbb2f6aec4fd7b5baf14270fcb3779","modified":1521810402567},{"_id":"source/_posts/javascript-part-1.md","hash":"74ac3c0fc3a0c93fbdbca44ca944a2934f692a14","modified":1512550177560},{"_id":"source/_posts/.DS_Store","hash":"b97a51d79d42275b0a88238adec1a07a80c0365b","modified":1517051891015},{"_id":"source/_posts/javascript-part-2.md","hash":"d94bb381168515a465d6139287ccdfb2008a9b73","modified":1516786531701},{"_id":"source/_posts/linux-1.md","hash":"9e2902bbcefc17782a471fa4fa2a38f95633ed37","modified":1517971929753},{"_id":"source/_posts/marathon-registry.md","hash":"463e8e61bd4dfb49cdade4453fb0b0b01aa9ed24","modified":1518419062963},{"_id":"source/_posts/mesos-part-1.md","hash":"ee648c7d88c07588c72b4bff28c0faf77adb01c2","modified":1517468651354},{"_id":"source/_posts/mesos-part-2.md","hash":"3d7a95f88ffc68f7a68b3f9f041f44b01cdedbdd","modified":1517468629150},{"_id":"source/_posts/shell-script-1.md","hash":"c2c31c062637535a6151a290f1a3660ce2a6dc95","modified":1517473962462},{"_id":"source/_posts/shell-script-2.md","hash":"b0f3eeffa82d34761b5e585169fe899070d9205b","modified":1517479356317},{"_id":"source/tags/index.md","hash":"9d558ce28d0d44c3463517088689bbca44bbb364","modified":1496944664000},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1496944664000},{"_id":"themes/beantech/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1496944664000},{"_id":"themes/beantech/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1496944664000},{"_id":"themes/beantech/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1496944664000},{"_id":"themes/beantech/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1496944664000},{"_id":"themes/beantech/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1496944664000},{"_id":"themes/beantech/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1496944664000},{"_id":"themes/beantech/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1496944664000},{"_id":"themes/beantech/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1496944664000},{"_id":"themes/beantech/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1496944664000},{"_id":"themes/beantech/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1496944664000},{"_id":"themes/beantech/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1496944664000},{"_id":"themes/beantech/layout/archive.ejs","hash":"72a150c8dff0031a9107d12eaa7c2e6c6ce950d2","modified":1496944664000},{"_id":"themes/beantech/layout/index.ejs","hash":"dc8a6eaa00d1e7c33a40979afe0953ed5d7b512e","modified":1496944664000},{"_id":"themes/beantech/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1496944664000},{"_id":"themes/beantech/layout/layout.ejs","hash":"a5af5b99ac3456ab5da1a319455904b979b91601","modified":1496944664000},{"_id":"themes/beantech/layout/page.ejs","hash":"c90797e4394c5cb63c2515109480e766d04e486e","modified":1496944664000},{"_id":"themes/beantech/layout/post.ejs","hash":"2d55684fc539dc281f9e2ec0409f09ea6ca43949","modified":1496944664000},{"_id":"themes/beantech/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1496944664000},{"_id":"themes/beantech/source/.DS_Store","hash":"a28a8cb2a6575d6d75b95b03186545fa53c8f889","modified":1511272024000},{"_id":"source/_posts/golang-design-p-02/screenshot.png","hash":"ce46727393e84355b5fcd3af964661a6173b97f7","modified":1521810216644},{"_id":"source/_posts/golang-design-p-01/image1.png","hash":"e145b4c63eb79abf6c3de963319591e8ad2a18fd","modified":1521802284465},{"_id":"source/_posts/shell-script-1/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517465877644},{"_id":"source/_posts/mesos-part-2/dependency.png","hash":"142cc8e658bb84d4d8fd86a6e3c28056ec708f87","modified":1516855673702},{"_id":"source/_posts/shell-script-1/hoho.png","hash":"76ce30452afff31fa6b649dc46ad86d3cd43bac9","modified":1517466061591},{"_id":"source/_posts/shell-script-1/screenshot.png","hash":"b311674fb959a0a3afd7cf0398f4c26858e854dc","modified":1517461710517},{"_id":"source/_posts/mesos-part-1/basic-0.png","hash":"aa366c9573c8b4e0e286330ec211f5356f4efafa","modified":1516801816421},{"_id":"source/_posts/mesos-part-1/basic-3deploy.png","hash":"48be0f112042bde7dd39b7f31b4fc32f24f6149f","modified":1516802157819},{"_id":"source/_posts/mesos-part-1/basic3running.png","hash":"854b134f5b876a27be613f70090b63a58586f13f","modified":1516802626341},{"_id":"source/_posts/mesos-part-1/hellomarathon.png","hash":"b657470cd663c05e503fd64227881ddf9974f4e6","modified":1516801779731},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1496944664000},{"_id":"themes/beantech/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1496944664000},{"_id":"themes/beantech/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1496944664000},{"_id":"themes/beantech/layout/_widget/featured-tags.ejs","hash":"0c9ce1942f1943dc8891a9302a922ef1ffe300c5","modified":1496944664000},{"_id":"themes/beantech/layout/_widget/friends-blog.ejs","hash":"734d3775017aedac185028924baf890a71a74548","modified":1496944664000},{"_id":"themes/beantech/layout/_widget/recent-posts.ejs","hash":"e08ab8ba60e31638006acf27f066b989a0a3c433","modified":1496944664000},{"_id":"themes/beantech/layout/_widget/short-about.ejs","hash":"3b10bd768f6ef30a42b1703fbc9a88627f9bfdf1","modified":1496944664000},{"_id":"themes/beantech/layout/_partial/footer.ejs","hash":"c31863b1fa66fd915bc4913440be6c610d12af80","modified":1496944664000},{"_id":"themes/beantech/layout/_partial/head.ejs","hash":"3542d15bdf73aa59f05f566b7ecd2255e83ee370","modified":1496944664000},{"_id":"themes/beantech/layout/_partial/header.ejs","hash":"aafb744601042f0270d2e6595129ac8a73ad2608","modified":1496944664000},{"_id":"themes/beantech/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1496944664000},{"_id":"themes/beantech/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1496944664000},{"_id":"themes/beantech/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1496944664000},{"_id":"themes/beantech/layout/_partial/toc.ejs","hash":"837f01e8a20e5023b4b292d1b3141a399567da65","modified":1496944664000},{"_id":"themes/beantech/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1496944664000},{"_id":"themes/beantech/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1496944664000},{"_id":"themes/beantech/source/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1496944664000},{"_id":"themes/beantech/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1496944664000},{"_id":"themes/beantech/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1496944664000},{"_id":"themes/beantech/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1496944664000},{"_id":"themes/beantech/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1496944664000},{"_id":"themes/beantech/source/css/toc.styl","hash":"9e959cebf9aef87ecac0ea20db7ee96ea1c26b38","modified":1496944664000},{"_id":"themes/beantech/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1496944664000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1496944664000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1496944664000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1496944664000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1496944664000},{"_id":"themes/beantech/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1496944664000},{"_id":"themes/beantech/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1496944664000},{"_id":"themes/beantech/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1496944664000},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1496944664000},{"_id":"themes/beantech/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1496944664000},{"_id":"themes/beantech/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1496944664000},{"_id":"themes/beantech/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1496944664000},{"_id":"source/_posts/linux-1/screenshot.png","hash":"b7b7bff73f9071cb0d8a2b0ae7e40f912e959e94","modified":1517971003858},{"_id":"source/_posts/mesos-part-1/screenshot.png","hash":"072fe9e2743e817cb4746069a71ab46ae01be9ce","modified":1516795160309},{"_id":"source/img/header_img/Iron-Man-3.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1496944664000},{"_id":"source/img/ironman-draw.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1496944664000},{"_id":"themes/beantech/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1496944664000},{"_id":"themes/beantech/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1496944664000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1496944664000},{"_id":"themes/beantech/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1496944664000},{"_id":"source/_posts/mesos-part-1/curl.png","hash":"44181ca3ce71db75ba56477d8944cd017dfa2473","modified":1516802200493},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1496944664000},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1496944664000},{"_id":"themes/beantech/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1496944664000},{"_id":"themes/beantech/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1496944664000},{"_id":"themes/beantech/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1496944664000},{"_id":"source/img/header_img/tf-logo-dark.png","hash":"5c7bf8ade9de134f8c77a3c59e575abe9fc6cdd4","modified":1496944664000},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1496944664000},{"_id":"themes/beantech/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1496944664000},{"_id":"source/img/beantech-desktop.png","hash":"4a8f8b209c9db8fd5209f15b8e4590525e258b0f","modified":1496944664000},{"_id":"source/img/header_img/tag-bg.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1496944664000},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1496944664000},{"_id":"source/img/header_img/home-bg-2-dark.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1496944664000},{"_id":"source/img/header_img/archive-bg.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1496944664000},{"_id":"public/post-sitemap.xml","hash":"29d373eb7fe877e006409e198f888dc4e0a22202","modified":1521810568185},{"_id":"public/tag-sitemap.xml","hash":"8ede8bdec9930d2e231d3d725b3a57d18eb141c3","modified":1521810568279},{"_id":"public/page-sitemap.xml","hash":"bc1131ffe012c9224b67d54dd944437f48ce38d6","modified":1521810568318},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1521810568321},{"_id":"public/sitemap.xml","hash":"0dd9d56efc73095c2ca64ff6ffb3b26280a11136","modified":1521810568322},{"_id":"public/404.html","hash":"0dbf553f8bb551a2b2f540a8e186be77a1e563c5","modified":1521810568349},{"_id":"public/tags/index.html","hash":"b46aa9843c42b6dc86f836e83078495a8368b97f","modified":1521810568367},{"_id":"public/2018/02/01/shell-script-1/index.html","hash":"020a85f50a1c0d37706fc0d90af1c0d9cbd8f901","modified":1521810568370},{"_id":"public/2018/01/25/mesos-part-2/index.html","hash":"9f87779348d19c1a77b141c26955aad039e5c254","modified":1521810568370},{"_id":"public/2018/01/24/mesos-part-1/index.html","hash":"2c4073a8a8e4fab4120bcf8b870f51b951dd5d74","modified":1521810568370},{"_id":"public/2017/12/06/javascript-part-2/index.html","hash":"91acdd45113b0f7fb151b35f3f106b4fc71ff322","modified":1521810568370},{"_id":"public/2017/12/06/javascript-part-1/index.html","hash":"381fc0d936fe2a2c1491fd14f7eb732b5c3f98cc","modified":1521810568370},{"_id":"public/about/index.html","hash":"01eaade440b653aa8da8939949168aa528262b36","modified":1521810568371},{"_id":"public/archive/index.html","hash":"0d9f6ae46f6d928bc9be17328cda96cb5234165b","modified":1521810568371},{"_id":"public/tags/Array/index.html","hash":"b050ab52ed8bbc42cf80aee435f2b1d2c2abcb83","modified":1521810568371},{"_id":"public/tags/forEach/index.html","hash":"5b1af9f37b06af837a5ea76caad4a63d820639d7","modified":1521810568371},{"_id":"public/tags/map/index.html","hash":"3a7fcf5ded98d4e91e7dcd41a2fb28b202d039ef","modified":1521810568371},{"_id":"public/tags/filter/index.html","hash":"346e27c9628cef0f4e8fc1ffbcdfe2e1adcee5e9","modified":1521810568372},{"_id":"public/index.html","hash":"17c3c983f3cf63a664d4a939c10610880ff1a217","modified":1521810568372},{"_id":"public/archives/index.html","hash":"bc295757fffd1decd4bb41450111871f8a2a5f30","modified":1521810568372},{"_id":"public/archives/2017/index.html","hash":"df0550e4e6c5278eb7ac3a913ceecbe6237200a1","modified":1521810568372},{"_id":"public/archives/2017/12/index.html","hash":"33cbe351c9b6d3b49d23f01e8eaf9c3157c483a7","modified":1521810568372},{"_id":"public/archives/2018/index.html","hash":"3d609ef4f7c2efbb4a089a7ffdbaafcee63bd1cb","modified":1521810568372},{"_id":"public/archives/2018/01/index.html","hash":"e96c38d3bcc4d1ad77259c3a0ae7a4a660422570","modified":1521810568372},{"_id":"public/archives/2018/02/index.html","hash":"26964d807898df619bdac0817e553a495166e424","modified":1521810568372},{"_id":"public/2018/02/01/shell-script-2/index.html","hash":"cd44573a984000a520843435ed153748ac5712be","modified":1521810568374},{"_id":"public/2018/03/23/golang-design-p-02/index.html","hash":"3a746a56716d1765d9961df04aeb1ce08662d8d4","modified":1521810568374},{"_id":"public/2018/03/18/golang-design-p-01/index.html","hash":"c617e55cebc63a8f6c2045c955d0f70a9ed587a8","modified":1521810568375},{"_id":"public/2018/02/12/marathon-registry/index.html","hash":"d6bee8ead978fb1c4ee17940339a5985d1bd8d7c","modified":1521810568375},{"_id":"public/2018/02/07/linux-1/index.html","hash":"c41a08a76faf9c3683e1934f7cca4ff1e74f229a","modified":1521810568375},{"_id":"public/archives/2018/03/index.html","hash":"aa73ba3f71c74a6340c44d5fd60cc124ca64ac48","modified":1521810568375},{"_id":"public/2018/03/18/golang-design-p-01/image1.png","hash":"e145b4c63eb79abf6c3de963319591e8ad2a18fd","modified":1521810568376},{"_id":"public/2018/03/23/golang-design-p-02/screenshot.png","hash":"ce46727393e84355b5fcd3af964661a6173b97f7","modified":1521810568376},{"_id":"public/2018/02/07/linux-1/screenshot.png","hash":"b7b7bff73f9071cb0d8a2b0ae7e40f912e959e94","modified":1521810568378}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2017-06-08T17:57:44.000Z","updated":"2017-06-08T17:57:44.000Z","path":"404.html","title":"","comments":1,"_id":"cjf3yp67x0000rxty7ys9lmnw","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T19:48:33.000Z","description":"Wish for the Best, Prepare for the Worst","header-img":"img/header_img/Iron-Man-3.jpg","comments":1,"_content":"\n> 일단 해봅니다...  \n 디버깅이 재미있습니다. 변태입니다.\n> 카카오 선행게임개발TF 클라이언트 개발자\n카카오게임즈 퀸스튜디오 말단 서버개발자\n\n> sangik213@gmail.com\n> aidan.qs@kakaocorp.com\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"Wish for the Best, Prepare for the Worst\"\nheader-img: \"img/header_img/Iron-Man-3.jpg\"\ncomments: true\n---\n\n> 일단 해봅니다...  \n 디버깅이 재미있습니다. 변태입니다.\n> 카카오 선행게임개발TF 클라이언트 개발자\n카카오게임즈 퀸스튜디오 말단 서버개발자\n\n> sangik213@gmail.com\n> aidan.qs@kakaocorp.com\n","updated":"2018-01-25T09:51:00.619Z","path":"about/index.html","_id":"cjf3yp68r0001rxtyeo7hrvnf","content":"<blockquote>\n<p>일단 해봅니다…<br>\n디버깅이 재미있습니다. 변태입니다.<br>\n카카오 선행게임개발TF 클라이언트 개발자<br>\n카카오게임즈 퀸스튜디오 말단 서버개발자</p>\n</blockquote>\n<blockquote>\n<p><a href=\"mailto:sangik213@gmail.com\" target=\"_blank\" rel=\"external\">sangik213@gmail.com</a><br>\n<a href=\"mailto:aidan.qs@kakaocorp.com\" target=\"_blank\" rel=\"external\">aidan.qs@kakaocorp.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>일단 해봅니다…<br>\n디버깅이 재미있습니다. 변태입니다.<br>\n카카오 선행게임개발TF 클라이언트 개발자<br>\n카카오게임즈 퀸스튜디오 말단 서버개발자</p>\n</blockquote>\n<blockquote>\n<p><a href=\"mailto:sangik213@gmail.com\" target=\"_blank\" rel=\"external\">sangik213@gmail.com</a><br>\n<a href=\"mailto:aidan.qs@kakaocorp.com\" target=\"_blank\" rel=\"external\">aidan.qs@kakaocorp.com</a></p>\n</blockquote>\n"},{"layout":"archive","title":"Archives","header-img":"img/header_img/archive-bg.png","comments":0,"date":"2017-03-20T11:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"img/header_img/archive-bg.png\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2017-06-08T17:57:44.000Z","path":"archive/index.html","_id":"cjf3yp68y0003rxtyglm536z2","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/header_img/tag-bg.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/header_img/tag-bg.png\"\n---\n","date":"2017-06-08T17:57:44.000Z","updated":"2017-06-08T17:57:44.000Z","path":"tags/index.html","comments":1,"_id":"cjf3yp6900005rxty8naanlq2","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"golang-design-p-01","catalog":true,"date":"2018-03-18T13:16:10.000Z","subtitle":null,"header-img":null,"_content":"\n# Golang Design Pattern - Bridge Pattern\n>고랭 디자인패턴을 공부하고있습니다.\n이왕하는김에 블로그에 정리를 해볼까합니다.\n작심삼일을 여러번해보겠습니다.\n\n---\n## 브릿지 패턴\nBridge Pattern은 두 구현체 간의 강한 결합을 제거하기 위해서 사용하는 패턴입니다.\n두 클래스 모두 추상화된 상위 클래스 또는 인터페이스를 가지게 되고, 의존성은 상위 클래스만 가지게됩니다.\n\n잘 이해가 안가시죠?\n저도 이해가안되서 준비했습니다.\n제가 공부하고 있는 Golang Design패턴책은 프린트 예제가 있었는데\n이해가 더 어렵다고 생각해 좋은 예제를 찾다가\n게임개발에 맞는 예제 블로그를 찾았습니다.(아쉽게도 자바)\nhttp://effectiveprogramming.tistory.com/entry/Bridge-%ED%8C%A8%ED%84%B4\n![hw](image1.png)\n_여기있는 무기 핸들러와 무기 간의 브릿지 패턴을 예로 Golang에 적용해서 이해해보았습니다._\n\n위 다이어그램은 Weapon과 WeaponHandler라는 상위 인터페이스를 보여줍니다.\n의존관계는 이 인터페이스들 간에만 존재합니다.\nWeapon을 구현한 Bow와 Sword는 실제 자신들을 다룰 구체적인 녀석을 모릅니다.\nWeaponHandler를 구현한 Warrior나 Smith도 자신들이 다룰 구체적인 녀석을 모릅니다.\n참 재밌죠?\n\n즉, 무기 관련 개발자는 Weapon의 인터페이스에 맞게 개발하면되고\n무기핸들러 관련 개발자는 WeaponHandler의 인터페이스에 맞게 개발하면 됩니다.\n각각의 구체적인 클래스들에는 변경에 있어서 영향을 주지않습니다.\n\n다음은 위 사항을 구현한 Golang 코드입니다.\n```golang\ntype Weapon interface {\n\tAttack()\n\tRepair()\n}\n\ntype Bow struct {}\nfunc(b *Bow) Attack() {\n\tprintln(\"bow Attack\")\n}\nfunc(b *Bow) Repair() {\n\tprintln(\"bow Repair\")\n}\n\ntype Sword struct {}\nfunc(s *Sword) Attack() {\n\tprintln(\"sword Attack\")\n}\nfunc(s *Sword) Repair() {\n\tprintln(\"sword Repair\")\n}\n```\nWeapon의 인터페이스에 호응하기위해서는 구조체에 Attack과 Repair라는 리시버함수만 달려있으면 됩니다.\n```golang\ntype WeaponHandler interface {\n\tHandle()\n}\n\ntype Warrior struct {\n\tweapon Weapon\n}\nfunc(w *Warrior) Handle() {\n\tw.weapon.Attack()\n}\n\ntype Smith struct {\n\tweapon Weapon\n}\nfunc(s *Smith) Handle() {\n\ts.weapon.Repair()\n}\n// WeaponHandler 인터페이스를 인자로 받는 함수를 만들어봅시다!\nfunc doit(w WeaponHandler) {\n\tw.Handle()\n}\n```\nWeaponHandler의 인터페이스는 Handle이라는 메서드만 들고있으면 됩니다.\n각각의 구체적인 구현체는 자신의 역할에 맞는 일을 수행합니다.\nWarrior는 무기로 공격하므로 Attack을 수행\nSmith는 무기를 수리하므로 Repair를 수행합니다.\n\n각각의 구현체는 자신이 들고있는 무기가 뭔지몰라도 Handle이라는 해당 메소드를 호출합니다.\n\n```golang\n\npackage structural\n\nimport \"testing\"\n\nfunc TestSmith_Handle(t *testing.T) {\n\tsword := &Sword{} // 칼을만들고\n\tsmith := &Smith{sword} // 스미스에게 칼을 줍니다\n\tsmith.Handle() // 결과: \"sword Repair\"\n\n\twarrior := &Warrior{sword} // 워리어에게 칼을 줍니다\n\twarrior.Handle() //  결과: \"sword Attack\"\n\n\tdoit(warrior) // \"sword Attack\"\n\tdoit(smith)  // \"sword Repair\"\n}\n```\n테스팅 코드를 돌려봅니다. 훌륭하죠!?\n\n이러한 방식으로 무기의 종류를 늘리거나 무기를 다루는 사람을 늘려도 다른 한쪽에\n영향을 주지않도록 만들수 있습니다\n\n강력한 디커플링 패턴인 브릿지패턴~ 여러분도 사용해보세요!\n다음시간에는 어댑터패턴을!\n","source":"_posts/golang-design-p-01.md","raw":"---\ntitle: golang-design-p-01\ncatalog: true\ndate: 2018-03-18 22:16:10\nsubtitle:\nheader-img:\ntags:\n---\n\n# Golang Design Pattern - Bridge Pattern\n>고랭 디자인패턴을 공부하고있습니다.\n이왕하는김에 블로그에 정리를 해볼까합니다.\n작심삼일을 여러번해보겠습니다.\n\n---\n## 브릿지 패턴\nBridge Pattern은 두 구현체 간의 강한 결합을 제거하기 위해서 사용하는 패턴입니다.\n두 클래스 모두 추상화된 상위 클래스 또는 인터페이스를 가지게 되고, 의존성은 상위 클래스만 가지게됩니다.\n\n잘 이해가 안가시죠?\n저도 이해가안되서 준비했습니다.\n제가 공부하고 있는 Golang Design패턴책은 프린트 예제가 있었는데\n이해가 더 어렵다고 생각해 좋은 예제를 찾다가\n게임개발에 맞는 예제 블로그를 찾았습니다.(아쉽게도 자바)\nhttp://effectiveprogramming.tistory.com/entry/Bridge-%ED%8C%A8%ED%84%B4\n![hw](image1.png)\n_여기있는 무기 핸들러와 무기 간의 브릿지 패턴을 예로 Golang에 적용해서 이해해보았습니다._\n\n위 다이어그램은 Weapon과 WeaponHandler라는 상위 인터페이스를 보여줍니다.\n의존관계는 이 인터페이스들 간에만 존재합니다.\nWeapon을 구현한 Bow와 Sword는 실제 자신들을 다룰 구체적인 녀석을 모릅니다.\nWeaponHandler를 구현한 Warrior나 Smith도 자신들이 다룰 구체적인 녀석을 모릅니다.\n참 재밌죠?\n\n즉, 무기 관련 개발자는 Weapon의 인터페이스에 맞게 개발하면되고\n무기핸들러 관련 개발자는 WeaponHandler의 인터페이스에 맞게 개발하면 됩니다.\n각각의 구체적인 클래스들에는 변경에 있어서 영향을 주지않습니다.\n\n다음은 위 사항을 구현한 Golang 코드입니다.\n```golang\ntype Weapon interface {\n\tAttack()\n\tRepair()\n}\n\ntype Bow struct {}\nfunc(b *Bow) Attack() {\n\tprintln(\"bow Attack\")\n}\nfunc(b *Bow) Repair() {\n\tprintln(\"bow Repair\")\n}\n\ntype Sword struct {}\nfunc(s *Sword) Attack() {\n\tprintln(\"sword Attack\")\n}\nfunc(s *Sword) Repair() {\n\tprintln(\"sword Repair\")\n}\n```\nWeapon의 인터페이스에 호응하기위해서는 구조체에 Attack과 Repair라는 리시버함수만 달려있으면 됩니다.\n```golang\ntype WeaponHandler interface {\n\tHandle()\n}\n\ntype Warrior struct {\n\tweapon Weapon\n}\nfunc(w *Warrior) Handle() {\n\tw.weapon.Attack()\n}\n\ntype Smith struct {\n\tweapon Weapon\n}\nfunc(s *Smith) Handle() {\n\ts.weapon.Repair()\n}\n// WeaponHandler 인터페이스를 인자로 받는 함수를 만들어봅시다!\nfunc doit(w WeaponHandler) {\n\tw.Handle()\n}\n```\nWeaponHandler의 인터페이스는 Handle이라는 메서드만 들고있으면 됩니다.\n각각의 구체적인 구현체는 자신의 역할에 맞는 일을 수행합니다.\nWarrior는 무기로 공격하므로 Attack을 수행\nSmith는 무기를 수리하므로 Repair를 수행합니다.\n\n각각의 구현체는 자신이 들고있는 무기가 뭔지몰라도 Handle이라는 해당 메소드를 호출합니다.\n\n```golang\n\npackage structural\n\nimport \"testing\"\n\nfunc TestSmith_Handle(t *testing.T) {\n\tsword := &Sword{} // 칼을만들고\n\tsmith := &Smith{sword} // 스미스에게 칼을 줍니다\n\tsmith.Handle() // 결과: \"sword Repair\"\n\n\twarrior := &Warrior{sword} // 워리어에게 칼을 줍니다\n\twarrior.Handle() //  결과: \"sword Attack\"\n\n\tdoit(warrior) // \"sword Attack\"\n\tdoit(smith)  // \"sword Repair\"\n}\n```\n테스팅 코드를 돌려봅니다. 훌륭하죠!?\n\n이러한 방식으로 무기의 종류를 늘리거나 무기를 다루는 사람을 늘려도 다른 한쪽에\n영향을 주지않도록 만들수 있습니다\n\n강력한 디커플링 패턴인 브릿지패턴~ 여러분도 사용해보세요!\n다음시간에는 어댑터패턴을!\n","slug":"golang-design-p-01","published":1,"updated":"2018-03-23T11:10:53.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3yp68u0002rxtyqky4ko68","content":"<h1 id=\"golang-design-pattern-bridge-pattern\">Golang Design Pattern - Bridge Pattern</h1>\n<blockquote>\n<p>고랭 디자인패턴을 공부하고있습니다.<br>\n이왕하는김에 블로그에 정리를 해볼까합니다.<br>\n작심삼일을 여러번해보겠습니다.</p>\n</blockquote>\n<hr>\n<h2 id=\"브릿지-패턴\">브릿지 패턴</h2>\n<p>Bridge Pattern은 두 구현체 간의 강한 결합을 제거하기 위해서 사용하는 패턴입니다.<br>\n두 클래스 모두 추상화된 상위 클래스 또는 인터페이스를 가지게 되고, 의존성은 상위 클래스만 가지게됩니다.</p>\n<p>잘 이해가 안가시죠?<br>\n저도 이해가안되서 준비했습니다.<br>\n제가 공부하고 있는 Golang Design패턴책은 프린트 예제가 있었는데<br>\n이해가 더 어렵다고 생각해 좋은 예제를 찾다가<br>\n게임개발에 맞는 예제 블로그를 찾았습니다.(아쉽게도 자바)<br>\n<a href=\"http://effectiveprogramming.tistory.com/entry/Bridge-%ED%8C%A8%ED%84%B4\" target=\"_blank\" rel=\"external\">http://effectiveprogramming.tistory.com/entry/Bridge-패턴</a><br>\n<img src=\"image1.png\" alt=\"hw\"><br>\n<em>여기있는 무기 핸들러와 무기 간의 브릿지 패턴을 예로 Golang에 적용해서 이해해보았습니다.</em></p>\n<p>위 다이어그램은 Weapon과 WeaponHandler라는 상위 인터페이스를 보여줍니다.<br>\n의존관계는 이 인터페이스들 간에만 존재합니다.<br>\nWeapon을 구현한 Bow와 Sword는 실제 자신들을 다룰 구체적인 녀석을 모릅니다.<br>\nWeaponHandler를 구현한 Warrior나 Smith도 자신들이 다룰 구체적인 녀석을 모릅니다.<br>\n참 재밌죠?</p>\n<p>즉, 무기 관련 개발자는 Weapon의 인터페이스에 맞게 개발하면되고<br>\n무기핸들러 관련 개발자는 WeaponHandler의 인터페이스에 맞게 개발하면 됩니다.<br>\n각각의 구체적인 클래스들에는 변경에 있어서 영향을 주지않습니다.</p>\n<p>다음은 위 사항을 구현한 Golang 코드입니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Weapon <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">\tAttack()</div><div class=\"line\">\tRepair()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Bow <span class=\"keyword\">struct</span> &#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(b *Bow)</span> <span class=\"title\">Attack</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">println</span>(<span class=\"string\">\"bow Attack\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(b *Bow)</span> <span class=\"title\">Repair</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">println</span>(<span class=\"string\">\"bow Repair\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Sword <span class=\"keyword\">struct</span> &#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(s *Sword)</span> <span class=\"title\">Attack</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">println</span>(<span class=\"string\">\"sword Attack\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(s *Sword)</span> <span class=\"title\">Repair</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">println</span>(<span class=\"string\">\"sword Repair\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Weapon의 인터페이스에 호응하기위해서는 구조체에 Attack과 Repair라는 리시버함수만 달려있으면 됩니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> WeaponHandler <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">\tHandle()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Warrior <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tweapon Weapon</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w *Warrior)</span> <span class=\"title\">Handle</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tw.weapon.Attack()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Smith <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tweapon Weapon</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(s *Smith)</span> <span class=\"title\">Handle</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\ts.weapon.Repair()</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// WeaponHandler 인터페이스를 인자로 받는 함수를 만들어봅시다!</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doit</span><span class=\"params\">(w WeaponHandler)</span></span> &#123;</div><div class=\"line\">\tw.Handle()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>WeaponHandler의 인터페이스는 Handle이라는 메서드만 들고있으면 됩니다.<br>\n각각의 구체적인 구현체는 자신의 역할에 맞는 일을 수행합니다.<br>\nWarrior는 무기로 공격하므로 Attack을 수행<br>\nSmith는 무기를 수리하므로 Repair를 수행합니다.</p>\n<p>각각의 구현체는 자신이 들고있는 무기가 뭔지몰라도 Handle이라는 해당 메소드를 호출합니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> structural</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"testing\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSmith_Handle</span><span class=\"params\">(t *testing.T)</span></span> &#123;</div><div class=\"line\">\tsword := &amp;Sword&#123;&#125; <span class=\"comment\">// 칼을만들고</span></div><div class=\"line\">\tsmith := &amp;Smith&#123;sword&#125; <span class=\"comment\">// 스미스에게 칼을 줍니다</span></div><div class=\"line\">\tsmith.Handle() <span class=\"comment\">// 결과: \"sword Repair\"</span></div><div class=\"line\"></div><div class=\"line\">\twarrior := &amp;Warrior&#123;sword&#125; <span class=\"comment\">// 워리어에게 칼을 줍니다</span></div><div class=\"line\">\twarrior.Handle() <span class=\"comment\">//  결과: \"sword Attack\"</span></div><div class=\"line\"></div><div class=\"line\">\tdoit(warrior) <span class=\"comment\">// \"sword Attack\"</span></div><div class=\"line\">\tdoit(smith)  <span class=\"comment\">// \"sword Repair\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>테스팅 코드를 돌려봅니다. 훌륭하죠!?</p>\n<p>이러한 방식으로 무기의 종류를 늘리거나 무기를 다루는 사람을 늘려도 다른 한쪽에<br>\n영향을 주지않도록 만들수 있습니다</p>\n<p>강력한 디커플링 패턴인 브릿지패턴~ 여러분도 사용해보세요!<br>\n다음시간에는 어댑터패턴을!</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>Golang Design Pattern - Bridge Pattern</h1>\n<blockquote>\n<p>고랭 디자인패턴을 공부하고있습니다.<br>\n이왕하는김에 블로그에 정리를 해볼까합니다.<br>\n작심삼일을 여러번해보겠습니다.</p>\n</blockquote>\n<hr>\n<h2>브릿지 패턴</h2>\n<p>Bridge Pattern은 두 구현체 간의 강한 결합을 제거하기 위해서 사용하는 패턴입니다.<br>\n두 클래스 모두 추상화된 상위 클래스 또는 인터페이스를 가지게 되고, 의존성은 상위 클래스만 가지게됩니다.</p>\n<p>잘 이해가 안가시죠?<br>\n저도 이해가안되서 준비했습니다.<br>\n제가 공부하고 있는 Golang Design패턴책은 프린트 예제가 있었는데<br>\n이해가 더 어렵다고 생각해 좋은 예제를 찾다가<br>\n게임개발에 맞는 예제 블로그를 찾았습니다.(아쉽게도 자바)<br>\n<a href=\"http://effectiveprogramming.tistory.com/entry/Bridge-%ED%8C%A8%ED%84%B4\" target=\"_blank\" rel=\"external\">http://effectiveprogramming.tistory.com/entry/Bridge-패턴</a><br>\n<img src=\"image1.png\" alt=\"hw\"><br>\n<em>여기있는 무기 핸들러와 무기 간의 브릿지 패턴을 예로 Golang에 적용해서 이해해보았습니다.</em></p>\n<p>위 다이어그램은 Weapon과 WeaponHandler라는 상위 인터페이스를 보여줍니다.<br>\n의존관계는 이 인터페이스들 간에만 존재합니다.<br>\nWeapon을 구현한 Bow와 Sword는 실제 자신들을 다룰 구체적인 녀석을 모릅니다.<br>\nWeaponHandler를 구현한 Warrior나 Smith도 자신들이 다룰 구체적인 녀석을 모릅니다.<br>\n참 재밌죠?</p>\n<p>즉, 무기 관련 개발자는 Weapon의 인터페이스에 맞게 개발하면되고<br>\n무기핸들러 관련 개발자는 WeaponHandler의 인터페이스에 맞게 개발하면 됩니다.<br>\n각각의 구체적인 클래스들에는 변경에 있어서 영향을 주지않습니다.</p>\n<p>다음은 위 사항을 구현한 Golang 코드입니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Weapon <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">\tAttack()</div><div class=\"line\">\tRepair()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Bow <span class=\"keyword\">struct</span> &#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(b *Bow)</span> <span class=\"title\">Attack</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">println</span>(<span class=\"string\">\"bow Attack\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(b *Bow)</span> <span class=\"title\">Repair</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">println</span>(<span class=\"string\">\"bow Repair\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Sword <span class=\"keyword\">struct</span> &#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(s *Sword)</span> <span class=\"title\">Attack</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">println</span>(<span class=\"string\">\"sword Attack\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(s *Sword)</span> <span class=\"title\">Repair</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">println</span>(<span class=\"string\">\"sword Repair\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Weapon의 인터페이스에 호응하기위해서는 구조체에 Attack과 Repair라는 리시버함수만 달려있으면 됩니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> WeaponHandler <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">\tHandle()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Warrior <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tweapon Weapon</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w *Warrior)</span> <span class=\"title\">Handle</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tw.weapon.Attack()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Smith <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tweapon Weapon</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(s *Smith)</span> <span class=\"title\">Handle</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\ts.weapon.Repair()</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// WeaponHandler 인터페이스를 인자로 받는 함수를 만들어봅시다!</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doit</span><span class=\"params\">(w WeaponHandler)</span></span> &#123;</div><div class=\"line\">\tw.Handle()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>WeaponHandler의 인터페이스는 Handle이라는 메서드만 들고있으면 됩니다.<br>\n각각의 구체적인 구현체는 자신의 역할에 맞는 일을 수행합니다.<br>\nWarrior는 무기로 공격하므로 Attack을 수행<br>\nSmith는 무기를 수리하므로 Repair를 수행합니다.</p>\n<p>각각의 구현체는 자신이 들고있는 무기가 뭔지몰라도 Handle이라는 해당 메소드를 호출합니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> structural</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"testing\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSmith_Handle</span><span class=\"params\">(t *testing.T)</span></span> &#123;</div><div class=\"line\">\tsword := &amp;Sword&#123;&#125; <span class=\"comment\">// 칼을만들고</span></div><div class=\"line\">\tsmith := &amp;Smith&#123;sword&#125; <span class=\"comment\">// 스미스에게 칼을 줍니다</span></div><div class=\"line\">\tsmith.Handle() <span class=\"comment\">// 결과: \"sword Repair\"</span></div><div class=\"line\"></div><div class=\"line\">\twarrior := &amp;Warrior&#123;sword&#125; <span class=\"comment\">// 워리어에게 칼을 줍니다</span></div><div class=\"line\">\twarrior.Handle() <span class=\"comment\">//  결과: \"sword Attack\"</span></div><div class=\"line\"></div><div class=\"line\">\tdoit(warrior) <span class=\"comment\">// \"sword Attack\"</span></div><div class=\"line\">\tdoit(smith)  <span class=\"comment\">// \"sword Repair\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>테스팅 코드를 돌려봅니다. 훌륭하죠!?</p>\n<p>이러한 방식으로 무기의 종류를 늘리거나 무기를 다루는 사람을 늘려도 다른 한쪽에<br>\n영향을 주지않도록 만들수 있습니다</p>\n<p>강력한 디커플링 패턴인 브릿지패턴~ 여러분도 사용해보세요!<br>\n다음시간에는 어댑터패턴을!</p>\n"},{"title":"golang-design-p-02","catalog":true,"date":"2018-03-23T11:20:44.000Z","subtitle":null,"header-img":null,"_content":"# Golang Design Pattern - Command Pattern\n>이번엔 명령패턴입니다!!\n그림판이나 Photoshop은 모든 액션들이 우리들(유저)들의 마우스Input과 연관이 큽니다.\n액션 하나 하나가 다 명령이죠.\nCtrl+z키라는 마법의 주문으로 우리는 우리가했던 액션들을 하나하나씩 취소할 수 있습니다.\n이를 가능하게 한것이 명령패턴입니다.\n요구사항에 대한 캡슐화와 요구사항을 큐에 저장하거나 기록, 취소 할수 있다는 장점이있죠!\n---\n\n## 커맨트패턴\n\n제가 게임프로그래밍을 접하면서 첫 디자인패턴을 공부했을때 만난 패턴입니다.\n글쓴이가 엄청 효율적이라면서 썰을 풀었지만 이해가 안됐었어요\n이제는 조금 이해가갑니다.\n너무 어렵게 생각하지마세요! Simple is best\n\n> 유저의 요청사항(명령) 캡슐화!\n> 요청사항과 큐를 이용해서 작업내역을 관리!\n\n그냥 가볍게 위 두가지만 생각하면 편하더라구요\n시작해볼까요\n\n우선 `Command` Interface를 구현해봅시다.\n스터디한 책에는 ConsoleCommand와 Excute만 있지만 그대로하면 재미없죠\n실수가 많은 저는 `Ctrl+z`의 광팬이니깐\nUndo도 추가해보겠습니다! ConsolePrint를 취소하는 것은 와닿지 않으니\n간단하게 `계산기명령`으로 해보면 어떨까요?\n답정너죠. 플러스와 마이너스 Command를 구현해보겠습니다.\n\n```golang\n\ntype Command interface {\n\tExecute(*Calculator)\n\tUndo(*Calculator)\n}\n\ntype PlusCommand struct {\n\tbeforeVal int\n\tnum       int\n}\n\nfunc (a *PlusCommand) Execute(calculator *Calculator) {\n\ta.beforeVal = calculator.val\n\tcalculator.Add(a.num)\n\tfmt.Println(calculator.val)\n}\n\nfunc (a *PlusCommand) Undo(calculator *Calculator) {\n\tcalculator.val = a.beforeVal\n\tfmt.Println(calculator.val)\n}\n```\n\nCommand interface는 `Execute`와 `Undo` 두가지 메소드로 이루어져있습니다.\n두개의 함수가 리시버함수로 달려있기만하면 인터페이스에 부합하는 것이죠\n인자로 `명령을 실행하는 주체가 될 Actor(계산기)`를 받습니다.\n\n>PlusCommand(더하기 요청사항)가 하는 짓은 간단합니다.\nExecute: 계산기에 있는 이전 값을 저장해두고(기록) 계산기의 Value에 특정값을 더하는 것\nUndo: 이전 값으로 계산기의 Value를 변경\n\n마이너스는 더 쉽겠죠 똑같습니다\n```golang\ntype MinusCommand struct {\n\tbeforeVal int\n\tnum       int\n}\n\nfunc (m *MinusCommand) Execute(calculator *Calculator) {\n\tm.beforeVal = calculator.val\n\tcalculator.Minus(m.num)\n\tfmt.Println(calculator.val)\n}\n\nfunc (m *MinusCommand) Undo(calculator *Calculator) {\n\tcalculator.val = m.beforeVal\n\tfmt.Println(calculator.val)\n}\n```\n\n읽다보니 계산기는 왜 설명안해주세요 하는 분들이 있을까바~\n제가 그냥 임의로 add와 minus로 구조화한겁니다 Simple하죠\n\n```golang\ntype Calculator struct {\n\tval int\n}\nfunc (c *Calculator) Add(num int) {\n\tc.val += num\n}\nfunc (c *Calculator) Minus(num int) {\n\tc.val -= num\n}\n```\n\n이제 명령패턴을 정복할 거의 모든 준비가 끝났습니다.\n그나마 필요한게 요청사항(작업내역)을 관리할 큐정도겠네요.\n\n작업내역을 저장할 큐슬라이스와 Actor를 품고 있는 `CommandQueue구조체`를 만들어봅시다 :\n```golang\ntype CommandQueue struct {\n\tqueue []Command\n\tactor *Calculator\n}\n\nfunc (p *CommandQueue) AddCommand(c Command) {\n\t// 명령을 큐에 저장하고\n\tp.queue = append(p.queue, c)\n\t// 실행합니다\n\tc.Execute(p.actor)\n\t// 길이가 10이 될경우 작업내역을 지웁니다\n\tif len(p.queue) == 10 {\n\t\tp.queue = make([]Command, 10)\n\t}\n}\n\nfunc (p *CommandQueue) RemoveCommand() {\n\t// 마지막 명령을 꺼내서 Undo를 호출합니다.\n\tlastCommand := p.queue[len(p.queue)- 1]\n\tlastCommand.Undo(p.actor)\n\t// 마지막 명령을 큐슬라이스에서 제거합니다.\n\tp.queue = p.queue[:len(p.queue)-1]\n}\n\nfunc main() {\n\tcalculator := &Calculator{val:0} // 0으로 시작하는 계산기\n\tqueue := CommandQueue{actor: calculator} // 계산기를 액터로 지정후 커맨드큐생성\n\n\tqueue.AddCommand(CreatePlusCommand(3)) // +3\n\tqueue.AddCommand(CreatePlusCommand(3)) // +3\n\tqueue.AddCommand(CreatePlusCommand(3)) // +3\n\tqueue.AddCommand(CreateMinusCommand(3)) // -3\n\tqueue.AddCommand(CreateMinusCommand(3)) // -3\n\tqueue.RemoveCommand() // 돌려돌려 되돌려줘\n\tqueue.RemoveCommand() // 돌려돌려 되돌려줘...\n}\n\n```\nAddCommand는 명령을 축적!\nRemoveCommand 명령을 제거!\n\n결과는!!!?\n!['hoho'](screenshot.png)\n작업취소까지 너무 좋네요\n저도 구현하면서 재밌었습니다\n\n이번에 개발하는 서버에 적용해볼게요!\ngo-redis에서 Cmdable이 이런식으로 동작하는거 같더라구요\n꼭 실무, 프로젝트에 적용해서 내것으로 만들어보세요.\n다음시간에는 더 재미있는 새로운 패턴으로 찾아뵙겠습니다.\n","source":"_posts/golang-design-p-02.md","raw":"---\ntitle: golang-design-p-02\ncatalog: true\ndate: 2018-03-23 20:20:44\nsubtitle:\nheader-img:\ntags:\n---\n# Golang Design Pattern - Command Pattern\n>이번엔 명령패턴입니다!!\n그림판이나 Photoshop은 모든 액션들이 우리들(유저)들의 마우스Input과 연관이 큽니다.\n액션 하나 하나가 다 명령이죠.\nCtrl+z키라는 마법의 주문으로 우리는 우리가했던 액션들을 하나하나씩 취소할 수 있습니다.\n이를 가능하게 한것이 명령패턴입니다.\n요구사항에 대한 캡슐화와 요구사항을 큐에 저장하거나 기록, 취소 할수 있다는 장점이있죠!\n---\n\n## 커맨트패턴\n\n제가 게임프로그래밍을 접하면서 첫 디자인패턴을 공부했을때 만난 패턴입니다.\n글쓴이가 엄청 효율적이라면서 썰을 풀었지만 이해가 안됐었어요\n이제는 조금 이해가갑니다.\n너무 어렵게 생각하지마세요! Simple is best\n\n> 유저의 요청사항(명령) 캡슐화!\n> 요청사항과 큐를 이용해서 작업내역을 관리!\n\n그냥 가볍게 위 두가지만 생각하면 편하더라구요\n시작해볼까요\n\n우선 `Command` Interface를 구현해봅시다.\n스터디한 책에는 ConsoleCommand와 Excute만 있지만 그대로하면 재미없죠\n실수가 많은 저는 `Ctrl+z`의 광팬이니깐\nUndo도 추가해보겠습니다! ConsolePrint를 취소하는 것은 와닿지 않으니\n간단하게 `계산기명령`으로 해보면 어떨까요?\n답정너죠. 플러스와 마이너스 Command를 구현해보겠습니다.\n\n```golang\n\ntype Command interface {\n\tExecute(*Calculator)\n\tUndo(*Calculator)\n}\n\ntype PlusCommand struct {\n\tbeforeVal int\n\tnum       int\n}\n\nfunc (a *PlusCommand) Execute(calculator *Calculator) {\n\ta.beforeVal = calculator.val\n\tcalculator.Add(a.num)\n\tfmt.Println(calculator.val)\n}\n\nfunc (a *PlusCommand) Undo(calculator *Calculator) {\n\tcalculator.val = a.beforeVal\n\tfmt.Println(calculator.val)\n}\n```\n\nCommand interface는 `Execute`와 `Undo` 두가지 메소드로 이루어져있습니다.\n두개의 함수가 리시버함수로 달려있기만하면 인터페이스에 부합하는 것이죠\n인자로 `명령을 실행하는 주체가 될 Actor(계산기)`를 받습니다.\n\n>PlusCommand(더하기 요청사항)가 하는 짓은 간단합니다.\nExecute: 계산기에 있는 이전 값을 저장해두고(기록) 계산기의 Value에 특정값을 더하는 것\nUndo: 이전 값으로 계산기의 Value를 변경\n\n마이너스는 더 쉽겠죠 똑같습니다\n```golang\ntype MinusCommand struct {\n\tbeforeVal int\n\tnum       int\n}\n\nfunc (m *MinusCommand) Execute(calculator *Calculator) {\n\tm.beforeVal = calculator.val\n\tcalculator.Minus(m.num)\n\tfmt.Println(calculator.val)\n}\n\nfunc (m *MinusCommand) Undo(calculator *Calculator) {\n\tcalculator.val = m.beforeVal\n\tfmt.Println(calculator.val)\n}\n```\n\n읽다보니 계산기는 왜 설명안해주세요 하는 분들이 있을까바~\n제가 그냥 임의로 add와 minus로 구조화한겁니다 Simple하죠\n\n```golang\ntype Calculator struct {\n\tval int\n}\nfunc (c *Calculator) Add(num int) {\n\tc.val += num\n}\nfunc (c *Calculator) Minus(num int) {\n\tc.val -= num\n}\n```\n\n이제 명령패턴을 정복할 거의 모든 준비가 끝났습니다.\n그나마 필요한게 요청사항(작업내역)을 관리할 큐정도겠네요.\n\n작업내역을 저장할 큐슬라이스와 Actor를 품고 있는 `CommandQueue구조체`를 만들어봅시다 :\n```golang\ntype CommandQueue struct {\n\tqueue []Command\n\tactor *Calculator\n}\n\nfunc (p *CommandQueue) AddCommand(c Command) {\n\t// 명령을 큐에 저장하고\n\tp.queue = append(p.queue, c)\n\t// 실행합니다\n\tc.Execute(p.actor)\n\t// 길이가 10이 될경우 작업내역을 지웁니다\n\tif len(p.queue) == 10 {\n\t\tp.queue = make([]Command, 10)\n\t}\n}\n\nfunc (p *CommandQueue) RemoveCommand() {\n\t// 마지막 명령을 꺼내서 Undo를 호출합니다.\n\tlastCommand := p.queue[len(p.queue)- 1]\n\tlastCommand.Undo(p.actor)\n\t// 마지막 명령을 큐슬라이스에서 제거합니다.\n\tp.queue = p.queue[:len(p.queue)-1]\n}\n\nfunc main() {\n\tcalculator := &Calculator{val:0} // 0으로 시작하는 계산기\n\tqueue := CommandQueue{actor: calculator} // 계산기를 액터로 지정후 커맨드큐생성\n\n\tqueue.AddCommand(CreatePlusCommand(3)) // +3\n\tqueue.AddCommand(CreatePlusCommand(3)) // +3\n\tqueue.AddCommand(CreatePlusCommand(3)) // +3\n\tqueue.AddCommand(CreateMinusCommand(3)) // -3\n\tqueue.AddCommand(CreateMinusCommand(3)) // -3\n\tqueue.RemoveCommand() // 돌려돌려 되돌려줘\n\tqueue.RemoveCommand() // 돌려돌려 되돌려줘...\n}\n\n```\nAddCommand는 명령을 축적!\nRemoveCommand 명령을 제거!\n\n결과는!!!?\n!['hoho'](screenshot.png)\n작업취소까지 너무 좋네요\n저도 구현하면서 재밌었습니다\n\n이번에 개발하는 서버에 적용해볼게요!\ngo-redis에서 Cmdable이 이런식으로 동작하는거 같더라구요\n꼭 실무, 프로젝트에 적용해서 내것으로 만들어보세요.\n다음시간에는 더 재미있는 새로운 패턴으로 찾아뵙겠습니다.\n","slug":"golang-design-p-02","published":1,"updated":"2018-03-23T13:06:42.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3yp68z0004rxty0usk52c7","content":"<h1 id=\"golang-design-pattern-command-pattern\">Golang Design Pattern - Command Pattern</h1>\n<blockquote>\n<p>이번엔 명령패턴입니다!!<br>\n그림판이나 Photoshop은 모든 액션들이 우리들(유저)들의 마우스Input과 연관이 큽니다.<br>\n액션 하나 하나가 다 명령이죠.<br>\nCtrl+z키라는 마법의 주문으로 우리는 우리가했던 액션들을 하나하나씩 취소할 수 있습니다.<br>\n이를 가능하게 한것이 명령패턴입니다.<br>\n요구사항에 대한 캡슐화와 요구사항을 큐에 저장하거나 기록, 취소 할수 있다는 장점이있죠!</p>\n</blockquote>\n<hr>\n<h2 id=\"커맨트패턴\">커맨트패턴</h2>\n<p>제가 게임프로그래밍을 접하면서 첫 디자인패턴을 공부했을때 만난 패턴입니다.<br>\n글쓴이가 엄청 효율적이라면서 썰을 풀었지만 이해가 안됐었어요<br>\n이제는 조금 이해가갑니다.<br>\n너무 어렵게 생각하지마세요! Simple is best</p>\n<blockquote>\n<p>유저의 요청사항(명령) 캡슐화!<br>\n요청사항과 큐를 이용해서 작업내역을 관리!</p>\n</blockquote>\n<p>그냥 가볍게 위 두가지만 생각하면 편하더라구요<br>\n시작해볼까요</p>\n<p>우선 <code>Command</code> Interface를 구현해봅시다.<br>\n스터디한 책에는 ConsoleCommand와 Excute만 있지만 그대로하면 재미없죠<br>\n실수가 많은 저는 <code>Ctrl+z</code>의 광팬이니깐<br>\nUndo도 추가해보겠습니다! ConsolePrint를 취소하는 것은 와닿지 않으니<br>\n간단하게 <code>계산기명령</code>으로 해보면 어떨까요?<br>\n답정너죠. 플러스와 마이너스 Command를 구현해보겠습니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Command <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">\tExecute(*Calculator)</div><div class=\"line\">\tUndo(*Calculator)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> PlusCommand <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tbeforeVal <span class=\"keyword\">int</span></div><div class=\"line\">\tnum       <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *PlusCommand)</span> <span class=\"title\">Execute</span><span class=\"params\">(calculator *Calculator)</span></span> &#123;</div><div class=\"line\">\ta.beforeVal = calculator.val</div><div class=\"line\">\tcalculator.Add(a.num)</div><div class=\"line\">\tfmt.Println(calculator.val)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *PlusCommand)</span> <span class=\"title\">Undo</span><span class=\"params\">(calculator *Calculator)</span></span> &#123;</div><div class=\"line\">\tcalculator.val = a.beforeVal</div><div class=\"line\">\tfmt.Println(calculator.val)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Command interface는 <code>Execute</code>와 <code>Undo</code> 두가지 메소드로 이루어져있습니다.<br>\n두개의 함수가 리시버함수로 달려있기만하면 인터페이스에 부합하는 것이죠<br>\n인자로 <code>명령을 실행하는 주체가 될 Actor(계산기)</code>를 받습니다.</p>\n<blockquote>\n<p>PlusCommand(더하기 요청사항)가 하는 짓은 간단합니다.<br>\nExecute: 계산기에 있는 이전 값을 저장해두고(기록) 계산기의 Value에 특정값을 더하는 것<br>\nUndo: 이전 값으로 계산기의 Value를 변경</p>\n</blockquote>\n<p>마이너스는 더 쉽겠죠 똑같습니다</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> MinusCommand <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tbeforeVal <span class=\"keyword\">int</span></div><div class=\"line\">\tnum       <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MinusCommand)</span> <span class=\"title\">Execute</span><span class=\"params\">(calculator *Calculator)</span></span> &#123;</div><div class=\"line\">\tm.beforeVal = calculator.val</div><div class=\"line\">\tcalculator.Minus(m.num)</div><div class=\"line\">\tfmt.Println(calculator.val)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MinusCommand)</span> <span class=\"title\">Undo</span><span class=\"params\">(calculator *Calculator)</span></span> &#123;</div><div class=\"line\">\tcalculator.val = m.beforeVal</div><div class=\"line\">\tfmt.Println(calculator.val)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>읽다보니 계산기는 왜 설명안해주세요 하는 분들이 있을까바~<br>\n제가 그냥 임의로 add와 minus로 구조화한겁니다 Simple하죠</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Calculator <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tval <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Calculator)</span> <span class=\"title\">Add</span><span class=\"params\">(num <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\tc.val += num</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Calculator)</span> <span class=\"title\">Minus</span><span class=\"params\">(num <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\tc.val -= num</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>이제 명령패턴을 정복할 거의 모든 준비가 끝났습니다.<br>\n그나마 필요한게 요청사항(작업내역)을 관리할 큐정도겠네요.</p>\n<p>작업내역을 저장할 큐슬라이스와 Actor를 품고 있는 <code>CommandQueue구조체</code>를 만들어봅시다 :</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> CommandQueue <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tqueue []Command</div><div class=\"line\">\tactor *Calculator</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *CommandQueue)</span> <span class=\"title\">AddCommand</span><span class=\"params\">(c Command)</span></span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// 명령을 큐에 저장하고</span></div><div class=\"line\">\tp.queue = <span class=\"built_in\">append</span>(p.queue, c)</div><div class=\"line\">\t<span class=\"comment\">// 실행합니다</span></div><div class=\"line\">\tc.Execute(p.actor)</div><div class=\"line\">\t<span class=\"comment\">// 길이가 10이 될경우 작업내역을 지웁니다</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(p.queue) == <span class=\"number\">10</span> &#123;</div><div class=\"line\">\t\tp.queue = <span class=\"built_in\">make</span>([]Command, <span class=\"number\">10</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *CommandQueue)</span> <span class=\"title\">RemoveCommand</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// 마지막 명령을 꺼내서 Undo를 호출합니다.</span></div><div class=\"line\">\tlastCommand := p.queue[<span class=\"built_in\">len</span>(p.queue)- <span class=\"number\">1</span>]</div><div class=\"line\">\tlastCommand.Undo(p.actor)</div><div class=\"line\">\t<span class=\"comment\">// 마지막 명령을 큐슬라이스에서 제거합니다.</span></div><div class=\"line\">\tp.queue = p.queue[:<span class=\"built_in\">len</span>(p.queue)<span class=\"number\">-1</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tcalculator := &amp;Calculator&#123;val:<span class=\"number\">0</span>&#125; <span class=\"comment\">// 0으로 시작하는 계산기</span></div><div class=\"line\">\tqueue := CommandQueue&#123;actor: calculator&#125; <span class=\"comment\">// 계산기를 액터로 지정후 커맨드큐생성</span></div><div class=\"line\"></div><div class=\"line\">\tqueue.AddCommand(CreatePlusCommand(<span class=\"number\">3</span>)) <span class=\"comment\">// +3</span></div><div class=\"line\">\tqueue.AddCommand(CreatePlusCommand(<span class=\"number\">3</span>)) <span class=\"comment\">// +3</span></div><div class=\"line\">\tqueue.AddCommand(CreatePlusCommand(<span class=\"number\">3</span>)) <span class=\"comment\">// +3</span></div><div class=\"line\">\tqueue.AddCommand(CreateMinusCommand(<span class=\"number\">3</span>)) <span class=\"comment\">// -3</span></div><div class=\"line\">\tqueue.AddCommand(CreateMinusCommand(<span class=\"number\">3</span>)) <span class=\"comment\">// -3</span></div><div class=\"line\">\tqueue.RemoveCommand() <span class=\"comment\">// 돌려돌려 되돌려줘</span></div><div class=\"line\">\tqueue.RemoveCommand() <span class=\"comment\">// 돌려돌려 되돌려줘...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>AddCommand는 명령을 축적!<br>\nRemoveCommand 명령을 제거!</p>\n<p>결과는!!!?<br>\n<img src=\"screenshot.png\" alt=\"'hoho'\"><br>\n작업취소까지 너무 좋네요<br>\n저도 구현하면서 재밌었습니다</p>\n<p>이번에 개발하는 서버에 적용해볼게요!<br>\ngo-redis에서 Cmdable이 이런식으로 동작하는거 같더라구요<br>\n꼭 실무, 프로젝트에 적용해서 내것으로 만들어보세요.<br>\n다음시간에는 더 재미있는 새로운 패턴으로 찾아뵙겠습니다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>Golang Design Pattern - Command Pattern</h1>\n<blockquote>\n<p>이번엔 명령패턴입니다!!<br>\n그림판이나 Photoshop은 모든 액션들이 우리들(유저)들의 마우스Input과 연관이 큽니다.<br>\n액션 하나 하나가 다 명령이죠.<br>\nCtrl+z키라는 마법의 주문으로 우리는 우리가했던 액션들을 하나하나씩 취소할 수 있습니다.<br>\n이를 가능하게 한것이 명령패턴입니다.<br>\n요구사항에 대한 캡슐화와 요구사항을 큐에 저장하거나 기록, 취소 할수 있다는 장점이있죠!</p>\n</blockquote>\n<hr>\n<h2>커맨트패턴</h2>\n<p>제가 게임프로그래밍을 접하면서 첫 디자인패턴을 공부했을때 만난 패턴입니다.<br>\n글쓴이가 엄청 효율적이라면서 썰을 풀었지만 이해가 안됐었어요<br>\n이제는 조금 이해가갑니다.<br>\n너무 어렵게 생각하지마세요! Simple is best</p>\n<blockquote>\n<p>유저의 요청사항(명령) 캡슐화!<br>\n요청사항과 큐를 이용해서 작업내역을 관리!</p>\n</blockquote>\n<p>그냥 가볍게 위 두가지만 생각하면 편하더라구요<br>\n시작해볼까요</p>\n<p>우선 <code>Command</code> Interface를 구현해봅시다.<br>\n스터디한 책에는 ConsoleCommand와 Excute만 있지만 그대로하면 재미없죠<br>\n실수가 많은 저는 <code>Ctrl+z</code>의 광팬이니깐<br>\nUndo도 추가해보겠습니다! ConsolePrint를 취소하는 것은 와닿지 않으니<br>\n간단하게 <code>계산기명령</code>으로 해보면 어떨까요?<br>\n답정너죠. 플러스와 마이너스 Command를 구현해보겠습니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Command <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">\tExecute(*Calculator)</div><div class=\"line\">\tUndo(*Calculator)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> PlusCommand <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tbeforeVal <span class=\"keyword\">int</span></div><div class=\"line\">\tnum       <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *PlusCommand)</span> <span class=\"title\">Execute</span><span class=\"params\">(calculator *Calculator)</span></span> &#123;</div><div class=\"line\">\ta.beforeVal = calculator.val</div><div class=\"line\">\tcalculator.Add(a.num)</div><div class=\"line\">\tfmt.Println(calculator.val)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *PlusCommand)</span> <span class=\"title\">Undo</span><span class=\"params\">(calculator *Calculator)</span></span> &#123;</div><div class=\"line\">\tcalculator.val = a.beforeVal</div><div class=\"line\">\tfmt.Println(calculator.val)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Command interface는 <code>Execute</code>와 <code>Undo</code> 두가지 메소드로 이루어져있습니다.<br>\n두개의 함수가 리시버함수로 달려있기만하면 인터페이스에 부합하는 것이죠<br>\n인자로 <code>명령을 실행하는 주체가 될 Actor(계산기)</code>를 받습니다.</p>\n<blockquote>\n<p>PlusCommand(더하기 요청사항)가 하는 짓은 간단합니다.<br>\nExecute: 계산기에 있는 이전 값을 저장해두고(기록) 계산기의 Value에 특정값을 더하는 것<br>\nUndo: 이전 값으로 계산기의 Value를 변경</p>\n</blockquote>\n<p>마이너스는 더 쉽겠죠 똑같습니다</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> MinusCommand <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tbeforeVal <span class=\"keyword\">int</span></div><div class=\"line\">\tnum       <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MinusCommand)</span> <span class=\"title\">Execute</span><span class=\"params\">(calculator *Calculator)</span></span> &#123;</div><div class=\"line\">\tm.beforeVal = calculator.val</div><div class=\"line\">\tcalculator.Minus(m.num)</div><div class=\"line\">\tfmt.Println(calculator.val)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MinusCommand)</span> <span class=\"title\">Undo</span><span class=\"params\">(calculator *Calculator)</span></span> &#123;</div><div class=\"line\">\tcalculator.val = m.beforeVal</div><div class=\"line\">\tfmt.Println(calculator.val)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>읽다보니 계산기는 왜 설명안해주세요 하는 분들이 있을까바~<br>\n제가 그냥 임의로 add와 minus로 구조화한겁니다 Simple하죠</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Calculator <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tval <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Calculator)</span> <span class=\"title\">Add</span><span class=\"params\">(num <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\tc.val += num</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Calculator)</span> <span class=\"title\">Minus</span><span class=\"params\">(num <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">\tc.val -= num</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>이제 명령패턴을 정복할 거의 모든 준비가 끝났습니다.<br>\n그나마 필요한게 요청사항(작업내역)을 관리할 큐정도겠네요.</p>\n<p>작업내역을 저장할 큐슬라이스와 Actor를 품고 있는 <code>CommandQueue구조체</code>를 만들어봅시다 :</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> CommandQueue <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\tqueue []Command</div><div class=\"line\">\tactor *Calculator</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *CommandQueue)</span> <span class=\"title\">AddCommand</span><span class=\"params\">(c Command)</span></span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// 명령을 큐에 저장하고</span></div><div class=\"line\">\tp.queue = <span class=\"built_in\">append</span>(p.queue, c)</div><div class=\"line\">\t<span class=\"comment\">// 실행합니다</span></div><div class=\"line\">\tc.Execute(p.actor)</div><div class=\"line\">\t<span class=\"comment\">// 길이가 10이 될경우 작업내역을 지웁니다</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(p.queue) == <span class=\"number\">10</span> &#123;</div><div class=\"line\">\t\tp.queue = <span class=\"built_in\">make</span>([]Command, <span class=\"number\">10</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *CommandQueue)</span> <span class=\"title\">RemoveCommand</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// 마지막 명령을 꺼내서 Undo를 호출합니다.</span></div><div class=\"line\">\tlastCommand := p.queue[<span class=\"built_in\">len</span>(p.queue)- <span class=\"number\">1</span>]</div><div class=\"line\">\tlastCommand.Undo(p.actor)</div><div class=\"line\">\t<span class=\"comment\">// 마지막 명령을 큐슬라이스에서 제거합니다.</span></div><div class=\"line\">\tp.queue = p.queue[:<span class=\"built_in\">len</span>(p.queue)<span class=\"number\">-1</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tcalculator := &amp;Calculator&#123;val:<span class=\"number\">0</span>&#125; <span class=\"comment\">// 0으로 시작하는 계산기</span></div><div class=\"line\">\tqueue := CommandQueue&#123;actor: calculator&#125; <span class=\"comment\">// 계산기를 액터로 지정후 커맨드큐생성</span></div><div class=\"line\"></div><div class=\"line\">\tqueue.AddCommand(CreatePlusCommand(<span class=\"number\">3</span>)) <span class=\"comment\">// +3</span></div><div class=\"line\">\tqueue.AddCommand(CreatePlusCommand(<span class=\"number\">3</span>)) <span class=\"comment\">// +3</span></div><div class=\"line\">\tqueue.AddCommand(CreatePlusCommand(<span class=\"number\">3</span>)) <span class=\"comment\">// +3</span></div><div class=\"line\">\tqueue.AddCommand(CreateMinusCommand(<span class=\"number\">3</span>)) <span class=\"comment\">// -3</span></div><div class=\"line\">\tqueue.AddCommand(CreateMinusCommand(<span class=\"number\">3</span>)) <span class=\"comment\">// -3</span></div><div class=\"line\">\tqueue.RemoveCommand() <span class=\"comment\">// 돌려돌려 되돌려줘</span></div><div class=\"line\">\tqueue.RemoveCommand() <span class=\"comment\">// 돌려돌려 되돌려줘...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>AddCommand는 명령을 축적!<br>\nRemoveCommand 명령을 제거!</p>\n<p>결과는!!!?<br>\n<img src=\"screenshot.png\" alt=\"'hoho'\"><br>\n작업취소까지 너무 좋네요<br>\n저도 구현하면서 재밌었습니다</p>\n<p>이번에 개발하는 서버에 적용해볼게요!<br>\ngo-redis에서 Cmdable이 이런식으로 동작하는거 같더라구요<br>\n꼭 실무, 프로젝트에 적용해서 내것으로 만들어보세요.<br>\n다음시간에는 더 재미있는 새로운 패턴으로 찾아뵙겠습니다.</p>\n"},{"title":"[Javascript] Array 배열에 대한 이해 - part1","catalog":true,"date":"2017-12-06T01:49:12.000Z","subtitle":"자바스크립트 배열 자유자재로 다루기","header-img":null,"_content":"\n# 자바스크립트 Array part1\n---\n> 내가 어떤 것을 만들고자할때 어떤 기능의 함수가 필요하고 해당 함수를 쓸줄 안다면 생산성이 높아지겠죠\n> 자바스크립트는 Array객체를 제공합니다. 리스트와 비슷한 고수준 객체인 배열을 생성하는데 사용되는 전역객체\n> 배열을 자유자재로 다룰 수 있다면 효율적이고 손쉬운 코딩이 가능합니다.\n> 전역객체인 Array를 쉽게 다루기 위한 표준내장함수들을 공부해봅시다~\n---\n제가 html5게임들을 만들면서\n가장 유용하고 자주 사용한 자료구조, `배열`입니다\n`push` `pop` `shift` `unshift`등의 기본 함수들을 사용해\n손쉽게 데이터를 조작할 수 있습니다.\n더 나아가 멋지게 배열들을 다룰 수 있는 중급 함수들을 공부해봅시다.\n\n## forEach\n---\n해당 배열의 요소 하나하나를 순회하면서 반복문을 돕니다.\n```\narray.forEach(callback [, thisArg])\n```\n첫번째 인자 `callback(item, index, array)``\n두번째 인자 `thisArg` // 콜백함수 사용시 this로서 사용되는 값\n\n```javascript\nvar fruits = ['사과', '바나나', '배']\nfruits.forEach(function (item, index, array) {\n  console.log(item, index);\n});\n// 사과 0\n// 바나나 1\n// 배 2\n/* ES6 */\nfruits.forEach((item, index, array) => { console.log(item, array[index]) })\n// 사과 사과\n// 바나나 바나나\n// 배 배\n```\n\n## map\n---\n배열 내의 모든 요소 각각에 대해 제공된 콜백함수를 호출하고. 그 결과를 모아 _새로운 배열을 반환_ 합니다\n```\narray.map(callback [, thisArg])\n```\n첫번째 인자 `callback(item, index, array)`\n두번째 인자 `thisArg` // 콜백함수 사용시 this로서 사용되는 값\n해당 배열에 따라 새로운 맵을 형성하므로 활용 방법이 정말 다양합니다\n\n```javascript\nvar userArray  = [{id: 1, name: '상익'}, {id: 2, name: '동혁'}, {id: 3, name: '지현'}]\n\nvar newUserArray = userArray.map(function(obj) {\n  var user = [];\n  user.push(obj.id)\n  user.push(obj.name)\n  return user\n});\nconsole.log(userArray)\nconsole.log(newUserArray)\n// userArray : [{id: 1, name: '상익'}, {id: 2, name: '동혁'}, {id: 3, name: '지현'}]\n// newUserArray : [[1, \"상익\"], [2, \"동혁\"], [3, \"지현\"]]\n```\n_서버로 부터 userArray를 받아 내가 원하는 2중 배열로 데이터 형태를 바꾼모습_\n\n새로운 배열을 생성해서 리턴하기때문에 메모리관리가 중요한 게임같은 장르에서는 사용이 성능을 잡아먹을 수 있습니다.\n하지만 고성능이 필요하지 않은 웹서비스의 경우, 매우 유용한 데이터 변환 함수입니다.\n다음은 Array의 map함수와 Function객체의 call을 응용한 예제입니다.\n\n```javascript\nvar map = Array.prototype.map\nvar a = map.call('Hello Aidan', function(x) {\n  return x.charCodeAt(0)\n})\n// string객체 역시 배열객체이기 때문에 인자값\n// 단어 하나하나에 대한 Byte의 아스키코드값을 요소로가지는 배열을 얻는 방법\n// [72, 101, 108, 108, 111, 32, 65, 105, 100, 97, 110] // 공백의 바이트코드는 32\n```\n참고자료\n[MDN 자바스크립트 String.prototype.charCodeAt](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt)\n[MDN 자바스크립트 Function.prototype.call](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/call)\n\n## filter\n---\nVueJS로 댓글플랫폼을 만들면서 가장 많이 사용한 함수입니다.\nMVVM으로 상태관리를 하다보니 관리받고 있는 DataList를 조작해\n제가원하는 리스트로 필터링할 함수가 필요했는데요.\nFilter는 그에 딱맞는 기능을 제공해줍니다.\n\n```\nvar newArray = array.filter(callback[, thisArg])\n```\n\n인자로 들어가는 콜백함수에는 `테스트함수`가 들어갑니다.\n테스트함수를 통과한 요소가 있는 새로운 배열을 반환해줍니다~\n신기하죠?? 신기해해주세요\n아무튼 테스트함수에 `리턴값이 true인 요소들에 대해서만 필터`됩니다.\n간단히 예제를 봐볼까요\n\n```javascript\nfunction isSmallEnough(value) {\n  return value <= 100;\n}\nvar filtered = [120, 500, 80, 130, 44].filter(isSmallEnough);\nconsole.log(filtered) // [80, 44]\n```\n`isSmallEnough라는 함수는 100이하의 값에 대하여 true를 반환합니다.`\nfilter함수는 isSmallEnough라는 테스트함수를 사용하여 필터링을 진행,\n테스트를 통과한 요소들로 구성된 새로운 배열을 반환합니다.\n결과값으로 100이하의 값으로 구성된 [80, 44]가 filtered에 담긴것을 확인가능!\n\n```javascript\nES6를 활용해 한줄로 간단히 내가쓴 댓글목록만 걸러냅니다.\n// username 클라이언트에 저장되어있는 사용자이름을 댓글작성자 이름과 비교해 필터링\nthis.commentList = this.commentList.filter((comment) => comment.author === username)\n```\n자 여러분들은 모르시겠지만 이미 강해졌습니다.\n배열을 다루는데 강력해진 자신의 힘이 실감되시나요?ㅋㅋ\n첫술에 배부를리 없죠. 해당 함수들을 자주 활용하시면서 능숙해지시면됩니다.\n각자의 프로젝트에 잘적용해보시길!\n오늘은 여기까지. 파트2에서 만나요\n","source":"_posts/javascript-part-1.md","raw":"---\ntitle: \"[Javascript] Array 배열에 대한 이해 - part1\"\ncatalog: true\ndate: 2017-12-06 10:49:12\nsubtitle: \"자바스크립트 배열 자유자재로 다루기\"\nheader-img:\ntags:\n- Array\n- forEach\n- map\n- filter\n---\n\n# 자바스크립트 Array part1\n---\n> 내가 어떤 것을 만들고자할때 어떤 기능의 함수가 필요하고 해당 함수를 쓸줄 안다면 생산성이 높아지겠죠\n> 자바스크립트는 Array객체를 제공합니다. 리스트와 비슷한 고수준 객체인 배열을 생성하는데 사용되는 전역객체\n> 배열을 자유자재로 다룰 수 있다면 효율적이고 손쉬운 코딩이 가능합니다.\n> 전역객체인 Array를 쉽게 다루기 위한 표준내장함수들을 공부해봅시다~\n---\n제가 html5게임들을 만들면서\n가장 유용하고 자주 사용한 자료구조, `배열`입니다\n`push` `pop` `shift` `unshift`등의 기본 함수들을 사용해\n손쉽게 데이터를 조작할 수 있습니다.\n더 나아가 멋지게 배열들을 다룰 수 있는 중급 함수들을 공부해봅시다.\n\n## forEach\n---\n해당 배열의 요소 하나하나를 순회하면서 반복문을 돕니다.\n```\narray.forEach(callback [, thisArg])\n```\n첫번째 인자 `callback(item, index, array)``\n두번째 인자 `thisArg` // 콜백함수 사용시 this로서 사용되는 값\n\n```javascript\nvar fruits = ['사과', '바나나', '배']\nfruits.forEach(function (item, index, array) {\n  console.log(item, index);\n});\n// 사과 0\n// 바나나 1\n// 배 2\n/* ES6 */\nfruits.forEach((item, index, array) => { console.log(item, array[index]) })\n// 사과 사과\n// 바나나 바나나\n// 배 배\n```\n\n## map\n---\n배열 내의 모든 요소 각각에 대해 제공된 콜백함수를 호출하고. 그 결과를 모아 _새로운 배열을 반환_ 합니다\n```\narray.map(callback [, thisArg])\n```\n첫번째 인자 `callback(item, index, array)`\n두번째 인자 `thisArg` // 콜백함수 사용시 this로서 사용되는 값\n해당 배열에 따라 새로운 맵을 형성하므로 활용 방법이 정말 다양합니다\n\n```javascript\nvar userArray  = [{id: 1, name: '상익'}, {id: 2, name: '동혁'}, {id: 3, name: '지현'}]\n\nvar newUserArray = userArray.map(function(obj) {\n  var user = [];\n  user.push(obj.id)\n  user.push(obj.name)\n  return user\n});\nconsole.log(userArray)\nconsole.log(newUserArray)\n// userArray : [{id: 1, name: '상익'}, {id: 2, name: '동혁'}, {id: 3, name: '지현'}]\n// newUserArray : [[1, \"상익\"], [2, \"동혁\"], [3, \"지현\"]]\n```\n_서버로 부터 userArray를 받아 내가 원하는 2중 배열로 데이터 형태를 바꾼모습_\n\n새로운 배열을 생성해서 리턴하기때문에 메모리관리가 중요한 게임같은 장르에서는 사용이 성능을 잡아먹을 수 있습니다.\n하지만 고성능이 필요하지 않은 웹서비스의 경우, 매우 유용한 데이터 변환 함수입니다.\n다음은 Array의 map함수와 Function객체의 call을 응용한 예제입니다.\n\n```javascript\nvar map = Array.prototype.map\nvar a = map.call('Hello Aidan', function(x) {\n  return x.charCodeAt(0)\n})\n// string객체 역시 배열객체이기 때문에 인자값\n// 단어 하나하나에 대한 Byte의 아스키코드값을 요소로가지는 배열을 얻는 방법\n// [72, 101, 108, 108, 111, 32, 65, 105, 100, 97, 110] // 공백의 바이트코드는 32\n```\n참고자료\n[MDN 자바스크립트 String.prototype.charCodeAt](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt)\n[MDN 자바스크립트 Function.prototype.call](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/call)\n\n## filter\n---\nVueJS로 댓글플랫폼을 만들면서 가장 많이 사용한 함수입니다.\nMVVM으로 상태관리를 하다보니 관리받고 있는 DataList를 조작해\n제가원하는 리스트로 필터링할 함수가 필요했는데요.\nFilter는 그에 딱맞는 기능을 제공해줍니다.\n\n```\nvar newArray = array.filter(callback[, thisArg])\n```\n\n인자로 들어가는 콜백함수에는 `테스트함수`가 들어갑니다.\n테스트함수를 통과한 요소가 있는 새로운 배열을 반환해줍니다~\n신기하죠?? 신기해해주세요\n아무튼 테스트함수에 `리턴값이 true인 요소들에 대해서만 필터`됩니다.\n간단히 예제를 봐볼까요\n\n```javascript\nfunction isSmallEnough(value) {\n  return value <= 100;\n}\nvar filtered = [120, 500, 80, 130, 44].filter(isSmallEnough);\nconsole.log(filtered) // [80, 44]\n```\n`isSmallEnough라는 함수는 100이하의 값에 대하여 true를 반환합니다.`\nfilter함수는 isSmallEnough라는 테스트함수를 사용하여 필터링을 진행,\n테스트를 통과한 요소들로 구성된 새로운 배열을 반환합니다.\n결과값으로 100이하의 값으로 구성된 [80, 44]가 filtered에 담긴것을 확인가능!\n\n```javascript\nES6를 활용해 한줄로 간단히 내가쓴 댓글목록만 걸러냅니다.\n// username 클라이언트에 저장되어있는 사용자이름을 댓글작성자 이름과 비교해 필터링\nthis.commentList = this.commentList.filter((comment) => comment.author === username)\n```\n자 여러분들은 모르시겠지만 이미 강해졌습니다.\n배열을 다루는데 강력해진 자신의 힘이 실감되시나요?ㅋㅋ\n첫술에 배부를리 없죠. 해당 함수들을 자주 활용하시면서 능숙해지시면됩니다.\n각자의 프로젝트에 잘적용해보시길!\n오늘은 여기까지. 파트2에서 만나요\n","slug":"javascript-part-1","published":1,"updated":"2017-12-06T08:49:37.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3yp6910006rxtyg5xgif3h","content":"<h1 id=\"자바스크립트-array-part1\">자바스크립트 Array part1</h1>\n<hr>\n<blockquote>\n<p>내가 어떤 것을 만들고자할때 어떤 기능의 함수가 필요하고 해당 함수를 쓸줄 안다면 생산성이 높아지겠죠<br>\n자바스크립트는 Array객체를 제공합니다. 리스트와 비슷한 고수준 객체인 배열을 생성하는데 사용되는 전역객체<br>\n배열을 자유자재로 다룰 수 있다면 효율적이고 손쉬운 코딩이 가능합니다.<br>\n전역객체인 Array를 쉽게 다루기 위한 표준내장함수들을 공부해봅시다~</p>\n</blockquote>\n<hr>\n<p>제가 html5게임들을 만들면서<br>\n가장 유용하고 자주 사용한 자료구조, <code>배열</code>입니다<br>\n<code>push</code> <code>pop</code> <code>shift</code> <code>unshift</code>등의 기본 함수들을 사용해<br>\n손쉽게 데이터를 조작할 수 있습니다.<br>\n더 나아가 멋지게 배열들을 다룰 수 있는 중급 함수들을 공부해봅시다.</p>\n<h2 id=\"foreach\">forEach</h2>\n<hr>\n<p>해당 배열의 요소 하나하나를 순회하면서 반복문을 돕니다.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">array</span><span class=\"selector-class\">.forEach</span>(<span class=\"selector-tag\">callback</span> <span class=\"selector-attr\">[, thisArg]</span>)</div></pre></td></tr></table></figure>\n<p>첫번째 인자 <code>callback(item, index, array)`` 두번째 인자</code>thisArg` // 콜백함수 사용시 this로서 사용되는 값</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fruits = [<span class=\"string\">'사과'</span>, <span class=\"string\">'바나나'</span>, <span class=\"string\">'배'</span>]</div><div class=\"line\">fruits.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, index, array</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(item, index);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 사과 0</span></div><div class=\"line\"><span class=\"comment\">// 바나나 1</span></div><div class=\"line\"><span class=\"comment\">// 배 2</span></div><div class=\"line\"><span class=\"comment\">/* ES6 */</span></div><div class=\"line\">fruits.forEach(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(item, array[index]) &#125;)</div><div class=\"line\"><span class=\"comment\">// 사과 사과</span></div><div class=\"line\"><span class=\"comment\">// 바나나 바나나</span></div><div class=\"line\"><span class=\"comment\">// 배 배</span></div></pre></td></tr></table></figure>\n<h2 id=\"map\">map</h2>\n<hr>\n<p>배열 내의 모든 요소 각각에 대해 제공된 콜백함수를 호출하고. 그 결과를 모아 <em>새로운 배열을 반환</em> 합니다</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">array</span>.<span class=\"built_in\">map</span>(callback [, thisArg])</div></pre></td></tr></table></figure>\n<p>첫번째 인자 <code>callback(item, index, array)</code><br>\n두번째 인자 <code>thisArg</code> // 콜백함수 사용시 this로서 사용되는 값<br>\n해당 배열에 따라 새로운 맵을 형성하므로 활용 방법이 정말 다양합니다</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> userArray  = [&#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'상익'</span>&#125;, &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'동혁'</span>&#125;, &#123;<span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'지현'</span>&#125;]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> newUserArray = userArray.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> user = [];</div><div class=\"line\">  user.push(obj.id)</div><div class=\"line\">  user.push(obj.name)</div><div class=\"line\">  <span class=\"keyword\">return</span> user</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(userArray)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(newUserArray)</div><div class=\"line\"><span class=\"comment\">// userArray : [&#123;id: 1, name: '상익'&#125;, &#123;id: 2, name: '동혁'&#125;, &#123;id: 3, name: '지현'&#125;]</span></div><div class=\"line\"><span class=\"comment\">// newUserArray : [[1, \"상익\"], [2, \"동혁\"], [3, \"지현\"]]</span></div></pre></td></tr></table></figure>\n<p><em>서버로 부터 userArray를 받아 내가 원하는 2중 배열로 데이터 형태를 바꾼모습</em></p>\n<p>새로운 배열을 생성해서 리턴하기때문에 메모리관리가 중요한 게임같은 장르에서는 사용이 성능을 잡아먹을 수 있습니다.<br>\n하지만 고성능이 필요하지 않은 웹서비스의 경우, 매우 유용한 데이터 변환 함수입니다.<br>\n다음은 Array의 map함수와 Function객체의 call을 응용한 예제입니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"built_in\">Array</span>.prototype.map</div><div class=\"line\"><span class=\"keyword\">var</span> a = map.call(<span class=\"string\">'Hello Aidan'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x.charCodeAt(<span class=\"number\">0</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// string객체 역시 배열객체이기 때문에 인자값</span></div><div class=\"line\"><span class=\"comment\">// 단어 하나하나에 대한 Byte의 아스키코드값을 요소로가지는 배열을 얻는 방법</span></div><div class=\"line\"><span class=\"comment\">// [72, 101, 108, 108, 111, 32, 65, 105, 100, 97, 110] // 공백의 바이트코드는 32</span></div></pre></td></tr></table></figure>\n<p>참고자료<br>\n<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\" target=\"_blank\" rel=\"external\">MDN 자바스크립트 String.prototype.charCodeAt</a><br>\n<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"external\">MDN 자바스크립트 Function.prototype.call</a></p>\n<h2 id=\"filter\">filter</h2>\n<hr>\n<p>VueJS로 댓글플랫폼을 만들면서 가장 많이 사용한 함수입니다.<br>\nMVVM으로 상태관리를 하다보니 관리받고 있는 DataList를 조작해<br>\n제가원하는 리스트로 필터링할 함수가 필요했는데요.<br>\nFilter는 그에 딱맞는 기능을 제공해줍니다.</p>\n<figure class=\"highlight golo\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> newArray = <span class=\"keyword\">array</span>.<span class=\"keyword\">filter</span>(callback[, thisArg])</div></pre></td></tr></table></figure>\n<p>인자로 들어가는 콜백함수에는 <code>테스트함수</code>가 들어갑니다.<br>\n테스트함수를 통과한 요소가 있는 새로운 배열을 반환해줍니다~<br>\n신기하죠?? 신기해해주세요<br>\n아무튼 테스트함수에 <code>리턴값이 true인 요소들에 대해서만 필터</code>됩니다.<br>\n간단히 예제를 봐볼까요</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isSmallEnough</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> value &lt;= <span class=\"number\">100</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> filtered = [<span class=\"number\">120</span>, <span class=\"number\">500</span>, <span class=\"number\">80</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].filter(isSmallEnough);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(filtered) <span class=\"comment\">// [80, 44]</span></div></pre></td></tr></table></figure>\n<p><code>isSmallEnough라는 함수는 100이하의 값에 대하여 true를 반환합니다.</code><br>\nfilter함수는 isSmallEnough라는 테스트함수를 사용하여 필터링을 진행,<br>\n테스트를 통과한 요소들로 구성된 새로운 배열을 반환합니다.<br>\n결과값으로 100이하의 값으로 구성된 [80, 44]가 filtered에 담긴것을 확인가능!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ES6를 활용해 한줄로 간단히 내가쓴 댓글목록만 걸러냅니다.</div><div class=\"line\"><span class=\"comment\">// username 클라이언트에 저장되어있는 사용자이름을 댓글작성자 이름과 비교해 필터링</span></div><div class=\"line\"><span class=\"keyword\">this</span>.commentList = <span class=\"keyword\">this</span>.commentList.filter(<span class=\"function\">(<span class=\"params\">comment</span>) =&gt;</span> comment.author === username)</div></pre></td></tr></table></figure>\n<p>자 여러분들은 모르시겠지만 이미 강해졌습니다.<br>\n배열을 다루는데 강력해진 자신의 힘이 실감되시나요?ㅋㅋ<br>\n첫술에 배부를리 없죠. 해당 함수들을 자주 활용하시면서 능숙해지시면됩니다.<br>\n각자의 프로젝트에 잘적용해보시길!<br>\n오늘은 여기까지. 파트2에서 만나요</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>자바스크립트 Array part1</h1>\n<hr>\n<blockquote>\n<p>내가 어떤 것을 만들고자할때 어떤 기능의 함수가 필요하고 해당 함수를 쓸줄 안다면 생산성이 높아지겠죠<br>\n자바스크립트는 Array객체를 제공합니다. 리스트와 비슷한 고수준 객체인 배열을 생성하는데 사용되는 전역객체<br>\n배열을 자유자재로 다룰 수 있다면 효율적이고 손쉬운 코딩이 가능합니다.<br>\n전역객체인 Array를 쉽게 다루기 위한 표준내장함수들을 공부해봅시다~</p>\n</blockquote>\n<hr>\n<p>제가 html5게임들을 만들면서<br>\n가장 유용하고 자주 사용한 자료구조, <code>배열</code>입니다<br>\n<code>push</code> <code>pop</code> <code>shift</code> <code>unshift</code>등의 기본 함수들을 사용해<br>\n손쉽게 데이터를 조작할 수 있습니다.<br>\n더 나아가 멋지게 배열들을 다룰 수 있는 중급 함수들을 공부해봅시다.</p>\n<h2>forEach</h2>\n<hr>\n<p>해당 배열의 요소 하나하나를 순회하면서 반복문을 돕니다.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">array</span><span class=\"selector-class\">.forEach</span>(<span class=\"selector-tag\">callback</span> <span class=\"selector-attr\">[, thisArg]</span>)</div></pre></td></tr></table></figure>\n<p>첫번째 인자 <code>callback(item, index, array)`` 두번째 인자</code>thisArg` // 콜백함수 사용시 this로서 사용되는 값</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fruits = [<span class=\"string\">'사과'</span>, <span class=\"string\">'바나나'</span>, <span class=\"string\">'배'</span>]</div><div class=\"line\">fruits.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, index, array</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(item, index);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 사과 0</span></div><div class=\"line\"><span class=\"comment\">// 바나나 1</span></div><div class=\"line\"><span class=\"comment\">// 배 2</span></div><div class=\"line\"><span class=\"comment\">/* ES6 */</span></div><div class=\"line\">fruits.forEach(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123; <span class=\"built_in\">console</span>.log(item, array[index]) &#125;)</div><div class=\"line\"><span class=\"comment\">// 사과 사과</span></div><div class=\"line\"><span class=\"comment\">// 바나나 바나나</span></div><div class=\"line\"><span class=\"comment\">// 배 배</span></div></pre></td></tr></table></figure>\n<h2>map</h2>\n<hr>\n<p>배열 내의 모든 요소 각각에 대해 제공된 콜백함수를 호출하고. 그 결과를 모아 <em>새로운 배열을 반환</em> 합니다</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">array</span>.<span class=\"built_in\">map</span>(callback [, thisArg])</div></pre></td></tr></table></figure>\n<p>첫번째 인자 <code>callback(item, index, array)</code><br>\n두번째 인자 <code>thisArg</code> // 콜백함수 사용시 this로서 사용되는 값<br>\n해당 배열에 따라 새로운 맵을 형성하므로 활용 방법이 정말 다양합니다</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> userArray  = [&#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'상익'</span>&#125;, &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'동혁'</span>&#125;, &#123;<span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">'지현'</span>&#125;]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> newUserArray = userArray.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> user = [];</div><div class=\"line\">  user.push(obj.id)</div><div class=\"line\">  user.push(obj.name)</div><div class=\"line\">  <span class=\"keyword\">return</span> user</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(userArray)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(newUserArray)</div><div class=\"line\"><span class=\"comment\">// userArray : [&#123;id: 1, name: '상익'&#125;, &#123;id: 2, name: '동혁'&#125;, &#123;id: 3, name: '지현'&#125;]</span></div><div class=\"line\"><span class=\"comment\">// newUserArray : [[1, \"상익\"], [2, \"동혁\"], [3, \"지현\"]]</span></div></pre></td></tr></table></figure>\n<p><em>서버로 부터 userArray를 받아 내가 원하는 2중 배열로 데이터 형태를 바꾼모습</em></p>\n<p>새로운 배열을 생성해서 리턴하기때문에 메모리관리가 중요한 게임같은 장르에서는 사용이 성능을 잡아먹을 수 있습니다.<br>\n하지만 고성능이 필요하지 않은 웹서비스의 경우, 매우 유용한 데이터 변환 함수입니다.<br>\n다음은 Array의 map함수와 Function객체의 call을 응용한 예제입니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"built_in\">Array</span>.prototype.map</div><div class=\"line\"><span class=\"keyword\">var</span> a = map.call(<span class=\"string\">'Hello Aidan'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x.charCodeAt(<span class=\"number\">0</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// string객체 역시 배열객체이기 때문에 인자값</span></div><div class=\"line\"><span class=\"comment\">// 단어 하나하나에 대한 Byte의 아스키코드값을 요소로가지는 배열을 얻는 방법</span></div><div class=\"line\"><span class=\"comment\">// [72, 101, 108, 108, 111, 32, 65, 105, 100, 97, 110] // 공백의 바이트코드는 32</span></div></pre></td></tr></table></figure>\n<p>참고자료<br>\n<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\" target=\"_blank\" rel=\"external\">MDN 자바스크립트 String.prototype.charCodeAt</a><br>\n<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"external\">MDN 자바스크립트 Function.prototype.call</a></p>\n<h2>filter</h2>\n<hr>\n<p>VueJS로 댓글플랫폼을 만들면서 가장 많이 사용한 함수입니다.<br>\nMVVM으로 상태관리를 하다보니 관리받고 있는 DataList를 조작해<br>\n제가원하는 리스트로 필터링할 함수가 필요했는데요.<br>\nFilter는 그에 딱맞는 기능을 제공해줍니다.</p>\n<figure class=\"highlight golo\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> newArray = <span class=\"keyword\">array</span>.<span class=\"keyword\">filter</span>(callback[, thisArg])</div></pre></td></tr></table></figure>\n<p>인자로 들어가는 콜백함수에는 <code>테스트함수</code>가 들어갑니다.<br>\n테스트함수를 통과한 요소가 있는 새로운 배열을 반환해줍니다~<br>\n신기하죠?? 신기해해주세요<br>\n아무튼 테스트함수에 <code>리턴값이 true인 요소들에 대해서만 필터</code>됩니다.<br>\n간단히 예제를 봐볼까요</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isSmallEnough</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> value &lt;= <span class=\"number\">100</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> filtered = [<span class=\"number\">120</span>, <span class=\"number\">500</span>, <span class=\"number\">80</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].filter(isSmallEnough);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(filtered) <span class=\"comment\">// [80, 44]</span></div></pre></td></tr></table></figure>\n<p><code>isSmallEnough라는 함수는 100이하의 값에 대하여 true를 반환합니다.</code><br>\nfilter함수는 isSmallEnough라는 테스트함수를 사용하여 필터링을 진행,<br>\n테스트를 통과한 요소들로 구성된 새로운 배열을 반환합니다.<br>\n결과값으로 100이하의 값으로 구성된 [80, 44]가 filtered에 담긴것을 확인가능!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ES6를 활용해 한줄로 간단히 내가쓴 댓글목록만 걸러냅니다.</div><div class=\"line\"><span class=\"comment\">// username 클라이언트에 저장되어있는 사용자이름을 댓글작성자 이름과 비교해 필터링</span></div><div class=\"line\"><span class=\"keyword\">this</span>.commentList = <span class=\"keyword\">this</span>.commentList.filter(<span class=\"function\">(<span class=\"params\">comment</span>) =&gt;</span> comment.author === username)</div></pre></td></tr></table></figure>\n<p>자 여러분들은 모르시겠지만 이미 강해졌습니다.<br>\n배열을 다루는데 강력해진 자신의 힘이 실감되시나요?ㅋㅋ<br>\n첫술에 배부를리 없죠. 해당 함수들을 자주 활용하시면서 능숙해지시면됩니다.<br>\n각자의 프로젝트에 잘적용해보시길!<br>\n오늘은 여기까지. 파트2에서 만나요</p>\n"},{"title":"[Javascript] Array 배열에 대한 이해 - part2","catalog":true,"date":"2017-12-06T07:49:38.000Z","subtitle":"자바스크립트 배열 자유자재로 다루기","header-img":null,"_content":"\n# 자바스크립트 Array part2\n\n저번시간에는 Array에 내장되어있는 함수 map, filter, forEach를 살펴보았습니다.\n이번엔 find, findIndex, reduce, sort를 살펴보겠습니다.\n\n뭔가 자료의 신뢰성을 위해서 딱딱하게 블로그를 해야한다지만 저는 그냥 진심으로 다가가기위해\n막쓰겠습니다. 배보다 배꼽이 크면 안되니깐요 (횡설수설)\n\n## reduce\n---\n이녀석은 기존의 것들과 달리 꽤나 까탈스러운 녀석입니다.\n그만큼 배웠을 때, 강력함을 누릴 수 있습니다. *중간에 포기하지마세요~ ^-^*\nreduce 메서드는 왼쪽에서 오른쪽으로 이동하면서 배열의 각 요소마다 누적 계산값과 함께 함수를 적용해\n하나의 값으로 줄입니다.\n`누적 계산값`이라는 단어가 포인트!\n\n```\narr.reduce(callback[, initialValue])\n```\n우선 파라미터부터 알아볼까요\n\n첫번째 인자 `callback(accumulator, currentValue, currentIndex, array)`\n두번째 인자 `initialValue // optional`\n\n콜백함수의 인자가 독특하네요. accumulator는 축적자 라는 뜻을 가지고있습니다.\n축적해서 쌓이는 값이라고 생각하면 편하겠네요.\n즉 첫번째 인자인 콜백함수는 축적된 값과 현재의 값으로 무언가를 하는 함수! 라고생각하시면 편합니다.\n\n간단하게 모든 배열의 요소들을 순차적으로 누적해가면서 더하는 함수를 만들어보겠습니다\n```\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.reduce(function(accumulator, currentValue, currentIndex, array) {\n  return accumulator + currentValue;\n});\n\n// 결과값 15\n```\n두번째인자를 생략했기때문에 첫 accumulator에 들어가는 값은 numbers배열의 첫번째 요소인 1이됩니다.\ncurrentValue는 그다음 요소인 2가 되겠네요.\n\n이런식으로 콜백함수는 여기서 총 4번호출됩니다.\n1과 2를 합치고 그다음에는 해당결과값 3과 그다음요소인 3을 합칩니다.\n즉, 배열을 왼쪽부터 오른쪽으로 돌면서 해당 콜백함수를 호출해 결과값을 누적해나갑니다.\n스웩;; 멋지죠?\n\n```javascript\n// 화살표함수로 간지터지게 한줄작성\nnumbers.reduce( (prev, curr) => prev + curr );\n```\n\n### 비교를 통해 배열 내 가장 큰 수 구하기\n```javascript\n// 정석이라면\nvar array = [0,1,2,9,4,5,6,7]\nvar accumulator = 0;\nfor (var i = 0; i < array.length; i ++) {\n  if (i == 0) { accumulator = array[i]; continue }\n  if (accumulator <= array[i]) accumulator = array[i];\n}\nconsole.log(accumulator) // 9\n```\n```javascript\n// 오늘 배운 리듀스를 활용해봅니다.\nvar array = [0,1,2,9,4,5,6,7]\narray.reduce(function(a, b) {return Math.max(a, b);})\n```\n```javascript\n// 참고용, 더 짧게 spread operator를 사용해봅시다ㅎㅎ 아름답죠\nvar max = Math.max(...array);\n```\n\n너무 멋지고 강력합니다 ㅠㅠ 날 가져요\n[spread operator](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_operator)에 대해서는 나중에 한번더 공부해보는 시간을 가지겠습니다.\n\n## findIndex\n---\n도대체 fruits라는 배열에 사과는 몇번째 요소일까??\n배열에 대해 특정 요소의 인덱스를 탐색하고 싶을때 어떻게 하시나요\n저같은 경우 indexOf를 자주 사용합니다.\n하지만 배열의 요소가 객체로 이루어졌을때는 indexOf만으로는 탐색할 수 없습니다.\n그때 사용되는 findIndex입니다.\n\n```\narr.findIndex(callback[, thisArg])\n```\n첫번째 인자 `callback(item, index, array)`\n두번째 인자 `thisArg` // optional\n\n주의할점\n> 콜백이 진리값을 반환하지 않거나, 배열의 길이가 0인경우 -1을 반환합니다.\n> findIndex는 0번째 부터 length-1까지의 인덱스요소에 대해 콜백함수를 순차적으로 실행합니다.\n> true값을 반환하는 요소가 있을 경우 순차실행을 중지하고 해당 요소의 인덱스를 반환합니다.\n\n```javascript\n// MDN javascript Array.prototpye.findIndex 예제\nfunction isBigEnough(element) {\n  return element >= 15;\n}\n\n[12, 5, 8, 130, 44].findIndex(isBigEnough);\n// 15보다 큰 요소는 130이므로 130의 index인 3이 결과값으로 도출됩니다.\n```\n\n## find\n---\n인덱스가 아닌 그녀석 그자체를 찾고싶습니다.\n그렇다면 이녀석! find를 사용하시면됩니다.\n\n```\narr.find(callback[, thisArg])\n```\n첫번째 인자 `callback(item, index, array)`\n두번째 인자 `thisArg` // optional\n\n사용법은 findIndex와 같습니다.\n예제만 살펴보고 패스!\n\n```javascript\nvar commentList = [\n  {id : 1, child_count: 2, message: '댓글좀 곱게답시다'},\n  {id : 2, child_count: 3, message: '꼰대짓좀 그만해요'},\n  {id : 3, child_count: 0, message: '사랑해요'}\n]\n\n// id값이 3인 녀석의 child_count를 증가시키자!\ncommentId = 3\ncommentList.find(c => c.id === commentId).child_count++\n// {id: 3, child_count: 1, message: \"사랑해요\"}\n// 해당 객체의 child_count가 0에서 1로 증가되었음을 확인!\n```\n","source":"_posts/javascript-part-2.md","raw":"---\ntitle: \"[Javascript] Array 배열에 대한 이해 - part2\"\ncatalog: true\ndate: 2017-12-06 16:49:38\nsubtitle: \"자바스크립트 배열 자유자재로 다루기\"\nheader-img:\ntags:\n---\n\n# 자바스크립트 Array part2\n\n저번시간에는 Array에 내장되어있는 함수 map, filter, forEach를 살펴보았습니다.\n이번엔 find, findIndex, reduce, sort를 살펴보겠습니다.\n\n뭔가 자료의 신뢰성을 위해서 딱딱하게 블로그를 해야한다지만 저는 그냥 진심으로 다가가기위해\n막쓰겠습니다. 배보다 배꼽이 크면 안되니깐요 (횡설수설)\n\n## reduce\n---\n이녀석은 기존의 것들과 달리 꽤나 까탈스러운 녀석입니다.\n그만큼 배웠을 때, 강력함을 누릴 수 있습니다. *중간에 포기하지마세요~ ^-^*\nreduce 메서드는 왼쪽에서 오른쪽으로 이동하면서 배열의 각 요소마다 누적 계산값과 함께 함수를 적용해\n하나의 값으로 줄입니다.\n`누적 계산값`이라는 단어가 포인트!\n\n```\narr.reduce(callback[, initialValue])\n```\n우선 파라미터부터 알아볼까요\n\n첫번째 인자 `callback(accumulator, currentValue, currentIndex, array)`\n두번째 인자 `initialValue // optional`\n\n콜백함수의 인자가 독특하네요. accumulator는 축적자 라는 뜻을 가지고있습니다.\n축적해서 쌓이는 값이라고 생각하면 편하겠네요.\n즉 첫번째 인자인 콜백함수는 축적된 값과 현재의 값으로 무언가를 하는 함수! 라고생각하시면 편합니다.\n\n간단하게 모든 배열의 요소들을 순차적으로 누적해가면서 더하는 함수를 만들어보겠습니다\n```\nvar numbers = [1, 2, 3, 4, 5]\nnumbers.reduce(function(accumulator, currentValue, currentIndex, array) {\n  return accumulator + currentValue;\n});\n\n// 결과값 15\n```\n두번째인자를 생략했기때문에 첫 accumulator에 들어가는 값은 numbers배열의 첫번째 요소인 1이됩니다.\ncurrentValue는 그다음 요소인 2가 되겠네요.\n\n이런식으로 콜백함수는 여기서 총 4번호출됩니다.\n1과 2를 합치고 그다음에는 해당결과값 3과 그다음요소인 3을 합칩니다.\n즉, 배열을 왼쪽부터 오른쪽으로 돌면서 해당 콜백함수를 호출해 결과값을 누적해나갑니다.\n스웩;; 멋지죠?\n\n```javascript\n// 화살표함수로 간지터지게 한줄작성\nnumbers.reduce( (prev, curr) => prev + curr );\n```\n\n### 비교를 통해 배열 내 가장 큰 수 구하기\n```javascript\n// 정석이라면\nvar array = [0,1,2,9,4,5,6,7]\nvar accumulator = 0;\nfor (var i = 0; i < array.length; i ++) {\n  if (i == 0) { accumulator = array[i]; continue }\n  if (accumulator <= array[i]) accumulator = array[i];\n}\nconsole.log(accumulator) // 9\n```\n```javascript\n// 오늘 배운 리듀스를 활용해봅니다.\nvar array = [0,1,2,9,4,5,6,7]\narray.reduce(function(a, b) {return Math.max(a, b);})\n```\n```javascript\n// 참고용, 더 짧게 spread operator를 사용해봅시다ㅎㅎ 아름답죠\nvar max = Math.max(...array);\n```\n\n너무 멋지고 강력합니다 ㅠㅠ 날 가져요\n[spread operator](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_operator)에 대해서는 나중에 한번더 공부해보는 시간을 가지겠습니다.\n\n## findIndex\n---\n도대체 fruits라는 배열에 사과는 몇번째 요소일까??\n배열에 대해 특정 요소의 인덱스를 탐색하고 싶을때 어떻게 하시나요\n저같은 경우 indexOf를 자주 사용합니다.\n하지만 배열의 요소가 객체로 이루어졌을때는 indexOf만으로는 탐색할 수 없습니다.\n그때 사용되는 findIndex입니다.\n\n```\narr.findIndex(callback[, thisArg])\n```\n첫번째 인자 `callback(item, index, array)`\n두번째 인자 `thisArg` // optional\n\n주의할점\n> 콜백이 진리값을 반환하지 않거나, 배열의 길이가 0인경우 -1을 반환합니다.\n> findIndex는 0번째 부터 length-1까지의 인덱스요소에 대해 콜백함수를 순차적으로 실행합니다.\n> true값을 반환하는 요소가 있을 경우 순차실행을 중지하고 해당 요소의 인덱스를 반환합니다.\n\n```javascript\n// MDN javascript Array.prototpye.findIndex 예제\nfunction isBigEnough(element) {\n  return element >= 15;\n}\n\n[12, 5, 8, 130, 44].findIndex(isBigEnough);\n// 15보다 큰 요소는 130이므로 130의 index인 3이 결과값으로 도출됩니다.\n```\n\n## find\n---\n인덱스가 아닌 그녀석 그자체를 찾고싶습니다.\n그렇다면 이녀석! find를 사용하시면됩니다.\n\n```\narr.find(callback[, thisArg])\n```\n첫번째 인자 `callback(item, index, array)`\n두번째 인자 `thisArg` // optional\n\n사용법은 findIndex와 같습니다.\n예제만 살펴보고 패스!\n\n```javascript\nvar commentList = [\n  {id : 1, child_count: 2, message: '댓글좀 곱게답시다'},\n  {id : 2, child_count: 3, message: '꼰대짓좀 그만해요'},\n  {id : 3, child_count: 0, message: '사랑해요'}\n]\n\n// id값이 3인 녀석의 child_count를 증가시키자!\ncommentId = 3\ncommentList.find(c => c.id === commentId).child_count++\n// {id: 3, child_count: 1, message: \"사랑해요\"}\n// 해당 객체의 child_count가 0에서 1로 증가되었음을 확인!\n```\n","slug":"javascript-part-2","published":1,"updated":"2018-01-24T09:35:31.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3yp6920007rxtyr5clvidj","content":"<h1 id=\"자바스크립트-array-part2\">자바스크립트 Array part2</h1>\n<p>저번시간에는 Array에 내장되어있는 함수 map, filter, forEach를 살펴보았습니다.<br>\n이번엔 find, findIndex, reduce, sort를 살펴보겠습니다.</p>\n<p>뭔가 자료의 신뢰성을 위해서 딱딱하게 블로그를 해야한다지만 저는 그냥 진심으로 다가가기위해<br>\n막쓰겠습니다. 배보다 배꼽이 크면 안되니깐요 (횡설수설)</p>\n<h2 id=\"reduce\">reduce</h2>\n<hr>\n<p>이녀석은 기존의 것들과 달리 꽤나 까탈스러운 녀석입니다.<br>\n그만큼 배웠을 때, 강력함을 누릴 수 있습니다. <em>중간에 포기하지마세요~ ^-^</em><br>\nreduce 메서드는 왼쪽에서 오른쪽으로 이동하면서 배열의 각 요소마다 누적 계산값과 함께 함수를 적용해<br>\n하나의 값으로 줄입니다.<br>\n<code>누적 계산값</code>이라는 단어가 포인트!</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">arr</span><span class=\"selector-class\">.reduce</span>(<span class=\"selector-tag\">callback</span><span class=\"selector-attr\">[, initialValue]</span>)</div></pre></td></tr></table></figure>\n<p>우선 파라미터부터 알아볼까요</p>\n<p>첫번째 인자 <code>callback(accumulator, currentValue, currentIndex, array)</code><br>\n두번째 인자 <code>initialValue // optional</code></p>\n<p>콜백함수의 인자가 독특하네요. accumulator는 축적자 라는 뜻을 가지고있습니다.<br>\n축적해서 쌓이는 값이라고 생각하면 편하겠네요.<br>\n즉 첫번째 인자인 콜백함수는 축적된 값과 현재의 값으로 무언가를 하는 함수! 라고생각하시면 편합니다.</p>\n<p>간단하게 모든 배열의 요소들을 순차적으로 누적해가면서 더하는 함수를 만들어보겠습니다</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\">numbers.reduce(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(accumulator, currentValue, currentIndex, array)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> accumulator + currentValue;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 결과값 15</span></div></pre></td></tr></table></figure>\n<p>두번째인자를 생략했기때문에 첫 accumulator에 들어가는 값은 numbers배열의 첫번째 요소인 1이됩니다.<br>\ncurrentValue는 그다음 요소인 2가 되겠네요.</p>\n<p>이런식으로 콜백함수는 여기서 총 4번호출됩니다.<br>\n1과 2를 합치고 그다음에는 해당결과값 3과 그다음요소인 3을 합칩니다.<br>\n즉, 배열을 왼쪽부터 오른쪽으로 돌면서 해당 콜백함수를 호출해 결과값을 누적해나갑니다.<br>\n스웩;; 멋지죠?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 화살표함수로 간지터지게 한줄작성</span></div><div class=\"line\">numbers.reduce( <span class=\"function\">(<span class=\"params\">prev, curr</span>) =&gt;</span> prev + curr );</div></pre></td></tr></table></figure>\n<h3 id=\"비교를-통해-배열-내-가장-큰-수-구하기\">비교를 통해 배열 내 가장 큰 수 구하기</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 정석이라면</span></div><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> accumulator = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; array.length; i ++) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123; accumulator = array[i]; <span class=\"keyword\">continue</span> &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (accumulator &lt;= array[i]) accumulator = array[i];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(accumulator) <span class=\"comment\">// 9</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 오늘 배운 리듀스를 활용해봅니다.</span></div><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</div><div class=\"line\">array.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(a, b);&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 참고용, 더 짧게 spread operator를 사용해봅시다ㅎㅎ 아름답죠</span></div><div class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"built_in\">Math</span>.max(...array);</div></pre></td></tr></table></figure>\n<p>너무 멋지고 강력합니다 ㅠㅠ 날 가져요<br>\n<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_operator\" target=\"_blank\" rel=\"external\">spread operator</a>에 대해서는 나중에 한번더 공부해보는 시간을 가지겠습니다.</p>\n<h2 id=\"findindex\">findIndex</h2>\n<hr>\n<p>도대체 fruits라는 배열에 사과는 몇번째 요소일까??<br>\n배열에 대해 특정 요소의 인덱스를 탐색하고 싶을때 어떻게 하시나요<br>\n저같은 경우 indexOf를 자주 사용합니다.<br>\n하지만 배열의 요소가 객체로 이루어졌을때는 indexOf만으로는 탐색할 수 없습니다.<br>\n그때 사용되는 findIndex입니다.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">arr</span><span class=\"selector-class\">.findIndex</span>(<span class=\"selector-tag\">callback</span><span class=\"selector-attr\">[, thisArg]</span>)</div></pre></td></tr></table></figure>\n<p>첫번째 인자 <code>callback(item, index, array)</code><br>\n두번째 인자 <code>thisArg</code> // optional</p>\n<p>주의할점</p>\n<blockquote>\n<p>콜백이 진리값을 반환하지 않거나, 배열의 길이가 0인경우 -1을 반환합니다.<br>\nfindIndex는 0번째 부터 length-1까지의 인덱스요소에 대해 콜백함수를 순차적으로 실행합니다.<br>\ntrue값을 반환하는 요소가 있을 경우 순차실행을 중지하고 해당 요소의 인덱스를 반환합니다.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// MDN javascript Array.prototpye.findIndex 예제</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> element &gt;= <span class=\"number\">15</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].findIndex(isBigEnough);</div><div class=\"line\"><span class=\"comment\">// 15보다 큰 요소는 130이므로 130의 index인 3이 결과값으로 도출됩니다.</span></div></pre></td></tr></table></figure>\n<h2 id=\"find\">find</h2>\n<hr>\n<p>인덱스가 아닌 그녀석 그자체를 찾고싶습니다.<br>\n그렇다면 이녀석! find를 사용하시면됩니다.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">arr</span><span class=\"selector-class\">.find</span>(<span class=\"selector-tag\">callback</span><span class=\"selector-attr\">[, thisArg]</span>)</div></pre></td></tr></table></figure>\n<p>첫번째 인자 <code>callback(item, index, array)</code><br>\n두번째 인자 <code>thisArg</code> // optional</p>\n<p>사용법은 findIndex와 같습니다.<br>\n예제만 살펴보고 패스!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> commentList = [</div><div class=\"line\">  &#123;<span class=\"attr\">id</span> : <span class=\"number\">1</span>, <span class=\"attr\">child_count</span>: <span class=\"number\">2</span>, <span class=\"attr\">message</span>: <span class=\"string\">'댓글좀 곱게답시다'</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"attr\">id</span> : <span class=\"number\">2</span>, <span class=\"attr\">child_count</span>: <span class=\"number\">3</span>, <span class=\"attr\">message</span>: <span class=\"string\">'꼰대짓좀 그만해요'</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"attr\">id</span> : <span class=\"number\">3</span>, <span class=\"attr\">child_count</span>: <span class=\"number\">0</span>, <span class=\"attr\">message</span>: <span class=\"string\">'사랑해요'</span>&#125;</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// id값이 3인 녀석의 child_count를 증가시키자!</span></div><div class=\"line\">commentId = <span class=\"number\">3</span></div><div class=\"line\">commentList.find(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.id === commentId).child_count++</div><div class=\"line\"><span class=\"comment\">// &#123;id: 3, child_count: 1, message: \"사랑해요\"&#125;</span></div><div class=\"line\"><span class=\"comment\">// 해당 객체의 child_count가 0에서 1로 증가되었음을 확인!</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1>자바스크립트 Array part2</h1>\n<p>저번시간에는 Array에 내장되어있는 함수 map, filter, forEach를 살펴보았습니다.<br>\n이번엔 find, findIndex, reduce, sort를 살펴보겠습니다.</p>\n<p>뭔가 자료의 신뢰성을 위해서 딱딱하게 블로그를 해야한다지만 저는 그냥 진심으로 다가가기위해<br>\n막쓰겠습니다. 배보다 배꼽이 크면 안되니깐요 (횡설수설)</p>\n<h2>reduce</h2>\n<hr>\n<p>이녀석은 기존의 것들과 달리 꽤나 까탈스러운 녀석입니다.<br>\n그만큼 배웠을 때, 강력함을 누릴 수 있습니다. <em>중간에 포기하지마세요~ ^-^</em><br>\nreduce 메서드는 왼쪽에서 오른쪽으로 이동하면서 배열의 각 요소마다 누적 계산값과 함께 함수를 적용해<br>\n하나의 값으로 줄입니다.<br>\n<code>누적 계산값</code>이라는 단어가 포인트!</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">arr</span><span class=\"selector-class\">.reduce</span>(<span class=\"selector-tag\">callback</span><span class=\"selector-attr\">[, initialValue]</span>)</div></pre></td></tr></table></figure>\n<p>우선 파라미터부터 알아볼까요</p>\n<p>첫번째 인자 <code>callback(accumulator, currentValue, currentIndex, array)</code><br>\n두번째 인자 <code>initialValue // optional</code></p>\n<p>콜백함수의 인자가 독특하네요. accumulator는 축적자 라는 뜻을 가지고있습니다.<br>\n축적해서 쌓이는 값이라고 생각하면 편하겠네요.<br>\n즉 첫번째 인자인 콜백함수는 축적된 값과 현재의 값으로 무언가를 하는 함수! 라고생각하시면 편합니다.</p>\n<p>간단하게 모든 배열의 요소들을 순차적으로 누적해가면서 더하는 함수를 만들어보겠습니다</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\">numbers.reduce(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(accumulator, currentValue, currentIndex, array)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> accumulator + currentValue;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 결과값 15</span></div></pre></td></tr></table></figure>\n<p>두번째인자를 생략했기때문에 첫 accumulator에 들어가는 값은 numbers배열의 첫번째 요소인 1이됩니다.<br>\ncurrentValue는 그다음 요소인 2가 되겠네요.</p>\n<p>이런식으로 콜백함수는 여기서 총 4번호출됩니다.<br>\n1과 2를 합치고 그다음에는 해당결과값 3과 그다음요소인 3을 합칩니다.<br>\n즉, 배열을 왼쪽부터 오른쪽으로 돌면서 해당 콜백함수를 호출해 결과값을 누적해나갑니다.<br>\n스웩;; 멋지죠?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 화살표함수로 간지터지게 한줄작성</span></div><div class=\"line\">numbers.reduce( <span class=\"function\">(<span class=\"params\">prev, curr</span>) =&gt;</span> prev + curr );</div></pre></td></tr></table></figure>\n<h3>비교를 통해 배열 내 가장 큰 수 구하기</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 정석이라면</span></div><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> accumulator = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; array.length; i ++) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123; accumulator = array[i]; <span class=\"keyword\">continue</span> &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (accumulator &lt;= array[i]) accumulator = array[i];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(accumulator) <span class=\"comment\">// 9</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 오늘 배운 리듀스를 활용해봅니다.</span></div><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</div><div class=\"line\">array.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(a, b);&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 참고용, 더 짧게 spread operator를 사용해봅시다ㅎㅎ 아름답죠</span></div><div class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"built_in\">Math</span>.max(...array);</div></pre></td></tr></table></figure>\n<p>너무 멋지고 강력합니다 ㅠㅠ 날 가져요<br>\n<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_operator\" target=\"_blank\" rel=\"external\">spread operator</a>에 대해서는 나중에 한번더 공부해보는 시간을 가지겠습니다.</p>\n<h2>findIndex</h2>\n<hr>\n<p>도대체 fruits라는 배열에 사과는 몇번째 요소일까??<br>\n배열에 대해 특정 요소의 인덱스를 탐색하고 싶을때 어떻게 하시나요<br>\n저같은 경우 indexOf를 자주 사용합니다.<br>\n하지만 배열의 요소가 객체로 이루어졌을때는 indexOf만으로는 탐색할 수 없습니다.<br>\n그때 사용되는 findIndex입니다.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">arr</span><span class=\"selector-class\">.findIndex</span>(<span class=\"selector-tag\">callback</span><span class=\"selector-attr\">[, thisArg]</span>)</div></pre></td></tr></table></figure>\n<p>첫번째 인자 <code>callback(item, index, array)</code><br>\n두번째 인자 <code>thisArg</code> // optional</p>\n<p>주의할점</p>\n<blockquote>\n<p>콜백이 진리값을 반환하지 않거나, 배열의 길이가 0인경우 -1을 반환합니다.<br>\nfindIndex는 0번째 부터 length-1까지의 인덱스요소에 대해 콜백함수를 순차적으로 실행합니다.<br>\ntrue값을 반환하는 요소가 있을 경우 순차실행을 중지하고 해당 요소의 인덱스를 반환합니다.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// MDN javascript Array.prototpye.findIndex 예제</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isBigEnough</span>(<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> element &gt;= <span class=\"number\">15</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">130</span>, <span class=\"number\">44</span>].findIndex(isBigEnough);</div><div class=\"line\"><span class=\"comment\">// 15보다 큰 요소는 130이므로 130의 index인 3이 결과값으로 도출됩니다.</span></div></pre></td></tr></table></figure>\n<h2>find</h2>\n<hr>\n<p>인덱스가 아닌 그녀석 그자체를 찾고싶습니다.<br>\n그렇다면 이녀석! find를 사용하시면됩니다.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">arr</span><span class=\"selector-class\">.find</span>(<span class=\"selector-tag\">callback</span><span class=\"selector-attr\">[, thisArg]</span>)</div></pre></td></tr></table></figure>\n<p>첫번째 인자 <code>callback(item, index, array)</code><br>\n두번째 인자 <code>thisArg</code> // optional</p>\n<p>사용법은 findIndex와 같습니다.<br>\n예제만 살펴보고 패스!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> commentList = [</div><div class=\"line\">  &#123;<span class=\"attr\">id</span> : <span class=\"number\">1</span>, <span class=\"attr\">child_count</span>: <span class=\"number\">2</span>, <span class=\"attr\">message</span>: <span class=\"string\">'댓글좀 곱게답시다'</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"attr\">id</span> : <span class=\"number\">2</span>, <span class=\"attr\">child_count</span>: <span class=\"number\">3</span>, <span class=\"attr\">message</span>: <span class=\"string\">'꼰대짓좀 그만해요'</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"attr\">id</span> : <span class=\"number\">3</span>, <span class=\"attr\">child_count</span>: <span class=\"number\">0</span>, <span class=\"attr\">message</span>: <span class=\"string\">'사랑해요'</span>&#125;</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// id값이 3인 녀석의 child_count를 증가시키자!</span></div><div class=\"line\">commentId = <span class=\"number\">3</span></div><div class=\"line\">commentList.find(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.id === commentId).child_count++</div><div class=\"line\"><span class=\"comment\">// &#123;id: 3, child_count: 1, message: \"사랑해요\"&#125;</span></div><div class=\"line\"><span class=\"comment\">// 해당 객체의 child_count가 0에서 1로 증가되었음을 확인!</span></div></pre></td></tr></table></figure>\n"},{"title":"linux-1","catalog":true,"date":"2018-02-07T02:13:24.000Z","subtitle":null,"header-img":null,"_content":"# CentOs 7 리눅스 기본 1\n>리눅스 서버를 통해 서버개발자로서의 기초를 다져봅시다\n\n---\n## 리눅스의 시스템에서 Root의 개념\nroot라고 이야기하면 root사용자 계정과 root디렉토리중 하나를 의미합니다.\n리눅스 시스템을 사용하기 위해 사용자 계정이 필요한데, 이러한 사용자 계정은 시스템 관리를 위한\n관리자 계정 (Super User:: sudo의 su가 이것임)과 일반 사용자 계정으로 나눌 수 있습니다.\n\n리눅스 파일체제의 최상위 디렉토리를 루트라고 한다. 따라서 이것은 리눅스의 모든 디렉토리들의 시작점이다.\n즉, 모든 디렉토리들을 절대 경로로 표기할 때에 이 디렉토리로부터 시작한다.\n\n## 디렉토리 구조\n리눅스는 앞에서 설명한 루트(/) 디렉토리를 시작으로 여러 파일들과 디렉토리로 구성되어있다.\nFHS(FileSystem Hierarchy Standard)을 따라 표준화되어가고있다.\n\n### 디렉토리의 종류와 특징\n```\n/ :  최상위 경로\n/bin : 기본 명령어 위치, CentOS 7부터 /usr/bin 로 링크\n/boot : 커널 이미지, 부트로드 관련 파일이 있다.\n/dev : 장치 파일이 저장된 디렉토리\n/etc : 설정관련 파일\n/lib : 라이브러리, CentOS 7부터 /usr/lib 로 링크\n/media : CD, DVD, USB 저장장치 마운트되는 곳\n/opt : 추가적인 소프트웨어 설치 디렉토리\n/sbin : 시스템 관리자를 위해 사용되는 명령어 등이 저장되는 디렉토리 , CentOS 7 부터 /usr/sbin/ 로 링크\n/srv : 시스템 서비스들\n/tmp : 임시 디렉토리\n/usr : 시스템이 아닌 일반 사용자가 사용하는 프로그램이 설치된 디렉토리\n/var : 시스템 운용중에 저장되는 자료\n/home : 사용자들의 홈디렉토리\n/root : root사용자의 홈디렉토리\n/proc : 커널과 프로세스를 위한 가상 파일 시스템\n```\n다음은 centos7의 루트 디렉토리(/)에서 명령어 `ls -Al`을 친 모습\n![hw](screenshot.png)\n","source":"_posts/linux-1.md","raw":"---\ntitle: linux-1\ncatalog: true\ndate: 2018-02-07 11:13:24\nsubtitle:\nheader-img:\ntags:\n---\n# CentOs 7 리눅스 기본 1\n>리눅스 서버를 통해 서버개발자로서의 기초를 다져봅시다\n\n---\n## 리눅스의 시스템에서 Root의 개념\nroot라고 이야기하면 root사용자 계정과 root디렉토리중 하나를 의미합니다.\n리눅스 시스템을 사용하기 위해 사용자 계정이 필요한데, 이러한 사용자 계정은 시스템 관리를 위한\n관리자 계정 (Super User:: sudo의 su가 이것임)과 일반 사용자 계정으로 나눌 수 있습니다.\n\n리눅스 파일체제의 최상위 디렉토리를 루트라고 한다. 따라서 이것은 리눅스의 모든 디렉토리들의 시작점이다.\n즉, 모든 디렉토리들을 절대 경로로 표기할 때에 이 디렉토리로부터 시작한다.\n\n## 디렉토리 구조\n리눅스는 앞에서 설명한 루트(/) 디렉토리를 시작으로 여러 파일들과 디렉토리로 구성되어있다.\nFHS(FileSystem Hierarchy Standard)을 따라 표준화되어가고있다.\n\n### 디렉토리의 종류와 특징\n```\n/ :  최상위 경로\n/bin : 기본 명령어 위치, CentOS 7부터 /usr/bin 로 링크\n/boot : 커널 이미지, 부트로드 관련 파일이 있다.\n/dev : 장치 파일이 저장된 디렉토리\n/etc : 설정관련 파일\n/lib : 라이브러리, CentOS 7부터 /usr/lib 로 링크\n/media : CD, DVD, USB 저장장치 마운트되는 곳\n/opt : 추가적인 소프트웨어 설치 디렉토리\n/sbin : 시스템 관리자를 위해 사용되는 명령어 등이 저장되는 디렉토리 , CentOS 7 부터 /usr/sbin/ 로 링크\n/srv : 시스템 서비스들\n/tmp : 임시 디렉토리\n/usr : 시스템이 아닌 일반 사용자가 사용하는 프로그램이 설치된 디렉토리\n/var : 시스템 운용중에 저장되는 자료\n/home : 사용자들의 홈디렉토리\n/root : root사용자의 홈디렉토리\n/proc : 커널과 프로세스를 위한 가상 파일 시스템\n```\n다음은 centos7의 루트 디렉토리(/)에서 명령어 `ls -Al`을 친 모습\n![hw](screenshot.png)\n","slug":"linux-1","published":1,"updated":"2018-02-07T02:52:09.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3yp6980009rxtyp9uszuq8","content":"<h1 id=\"centos-7-리눅스-기본-1\">CentOs 7 리눅스 기본 1</h1>\n<blockquote>\n<p>리눅스 서버를 통해 서버개발자로서의 기초를 다져봅시다</p>\n</blockquote>\n<hr>\n<h2 id=\"리눅스의-시스템에서-root의-개념\">리눅스의 시스템에서 Root의 개념</h2>\n<p>root라고 이야기하면 root사용자 계정과 root디렉토리중 하나를 의미합니다.<br>\n리눅스 시스템을 사용하기 위해 사용자 계정이 필요한데, 이러한 사용자 계정은 시스템 관리를 위한<br>\n관리자 계정 (Super User:: sudo의 su가 이것임)과 일반 사용자 계정으로 나눌 수 있습니다.</p>\n<p>리눅스 파일체제의 최상위 디렉토리를 루트라고 한다. 따라서 이것은 리눅스의 모든 디렉토리들의 시작점이다.<br>\n즉, 모든 디렉토리들을 절대 경로로 표기할 때에 이 디렉토리로부터 시작한다.</p>\n<h2 id=\"디렉토리-구조\">디렉토리 구조</h2>\n<p>리눅스는 앞에서 설명한 루트(/) 디렉토리를 시작으로 여러 파일들과 디렉토리로 구성되어있다.<br>\nFHS(FileSystem Hierarchy Standard)을 따라 표준화되어가고있다.</p>\n<h3 id=\"디렉토리의-종류와-특징\">디렉토리의 종류와 특징</h3>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">/ :  최상위 경로</div><div class=\"line\"><span class=\"string\">/bin</span> : 기본 명령어 위치, CentOS 7부터 <span class=\"string\">/usr/bin</span> 로 링크</div><div class=\"line\"><span class=\"string\">/boot</span> : 커널 이미지, 부트로드 관련 파일이 있다.</div><div class=\"line\"><span class=\"string\">/dev</span> : 장치 파일이 저장된 디렉토리</div><div class=\"line\"><span class=\"string\">/etc</span> : 설정관련 파일</div><div class=\"line\"><span class=\"string\">/lib</span> : 라이브러리, CentOS 7부터 <span class=\"string\">/usr/lib</span> 로 링크</div><div class=\"line\"><span class=\"string\">/media</span> : CD, DVD, USB 저장장치 마운트되는 곳</div><div class=\"line\"><span class=\"string\">/opt</span> : 추가적인 소프트웨어 설치 디렉토리</div><div class=\"line\"><span class=\"string\">/sbin</span> : 시스템 관리자를 위해 사용되는 명령어 등이 저장되는 디렉토리 , CentOS 7 부터 <span class=\"string\">/usr/sbin/</span> 로 링크</div><div class=\"line\"><span class=\"string\">/srv</span> : 시스템 서비스들</div><div class=\"line\"><span class=\"string\">/tmp</span> : 임시 디렉토리</div><div class=\"line\"><span class=\"string\">/usr</span> : 시스템이 아닌 일반 사용자가 사용하는 프로그램이 설치된 디렉토리</div><div class=\"line\"><span class=\"string\">/var</span> : 시스템 운용중에 저장되는 자료</div><div class=\"line\"><span class=\"string\">/home</span> : 사용자들의 홈디렉토리</div><div class=\"line\"><span class=\"string\">/root</span> : root사용자의 홈디렉토리</div><div class=\"line\"><span class=\"string\">/proc</span> : 커널과 프로세스를 위한 가상 파일 시스템</div></pre></td></tr></table></figure>\n<p>다음은 centos7의 루트 디렉토리(/)에서 명령어 <code>ls -Al</code>을 친 모습<br>\n<img src=\"screenshot.png\" alt=\"hw\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1>CentOs 7 리눅스 기본 1</h1>\n<blockquote>\n<p>리눅스 서버를 통해 서버개발자로서의 기초를 다져봅시다</p>\n</blockquote>\n<hr>\n<h2>리눅스의 시스템에서 Root의 개념</h2>\n<p>root라고 이야기하면 root사용자 계정과 root디렉토리중 하나를 의미합니다.<br>\n리눅스 시스템을 사용하기 위해 사용자 계정이 필요한데, 이러한 사용자 계정은 시스템 관리를 위한<br>\n관리자 계정 (Super User:: sudo의 su가 이것임)과 일반 사용자 계정으로 나눌 수 있습니다.</p>\n<p>리눅스 파일체제의 최상위 디렉토리를 루트라고 한다. 따라서 이것은 리눅스의 모든 디렉토리들의 시작점이다.<br>\n즉, 모든 디렉토리들을 절대 경로로 표기할 때에 이 디렉토리로부터 시작한다.</p>\n<h2>디렉토리 구조</h2>\n<p>리눅스는 앞에서 설명한 루트(/) 디렉토리를 시작으로 여러 파일들과 디렉토리로 구성되어있다.<br>\nFHS(FileSystem Hierarchy Standard)을 따라 표준화되어가고있다.</p>\n<h3>디렉토리의 종류와 특징</h3>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">/ :  최상위 경로</div><div class=\"line\"><span class=\"string\">/bin</span> : 기본 명령어 위치, CentOS 7부터 <span class=\"string\">/usr/bin</span> 로 링크</div><div class=\"line\"><span class=\"string\">/boot</span> : 커널 이미지, 부트로드 관련 파일이 있다.</div><div class=\"line\"><span class=\"string\">/dev</span> : 장치 파일이 저장된 디렉토리</div><div class=\"line\"><span class=\"string\">/etc</span> : 설정관련 파일</div><div class=\"line\"><span class=\"string\">/lib</span> : 라이브러리, CentOS 7부터 <span class=\"string\">/usr/lib</span> 로 링크</div><div class=\"line\"><span class=\"string\">/media</span> : CD, DVD, USB 저장장치 마운트되는 곳</div><div class=\"line\"><span class=\"string\">/opt</span> : 추가적인 소프트웨어 설치 디렉토리</div><div class=\"line\"><span class=\"string\">/sbin</span> : 시스템 관리자를 위해 사용되는 명령어 등이 저장되는 디렉토리 , CentOS 7 부터 <span class=\"string\">/usr/sbin/</span> 로 링크</div><div class=\"line\"><span class=\"string\">/srv</span> : 시스템 서비스들</div><div class=\"line\"><span class=\"string\">/tmp</span> : 임시 디렉토리</div><div class=\"line\"><span class=\"string\">/usr</span> : 시스템이 아닌 일반 사용자가 사용하는 프로그램이 설치된 디렉토리</div><div class=\"line\"><span class=\"string\">/var</span> : 시스템 운용중에 저장되는 자료</div><div class=\"line\"><span class=\"string\">/home</span> : 사용자들의 홈디렉토리</div><div class=\"line\"><span class=\"string\">/root</span> : root사용자의 홈디렉토리</div><div class=\"line\"><span class=\"string\">/proc</span> : 커널과 프로세스를 위한 가상 파일 시스템</div></pre></td></tr></table></figure>\n<p>다음은 centos7의 루트 디렉토리(/)에서 명령어 <code>ls -Al</code>을 친 모습<br>\n<img src=\"screenshot.png\" alt=\"hw\"></p>\n"},{"title":"marathon-registry","catalog":true,"date":"2018-02-12T06:43:00.000Z","subtitle":null,"header-img":null,"_content":"# 마라톤으로 private docker registry 배포\n> Marathon으로 docker registry를 배포하면서 겪은\n어려움을 정리합니다\n","source":"_posts/marathon-registry.md","raw":"---\ntitle: marathon-registry\ncatalog: true\ndate: 2018-02-12 15:43:00\nsubtitle:\nheader-img:\ntags:\n---\n# 마라톤으로 private docker registry 배포\n> Marathon으로 docker registry를 배포하면서 겪은\n어려움을 정리합니다\n","slug":"marathon-registry","published":1,"updated":"2018-02-12T07:04:22.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3yp69a000arxtyn95trzym","content":"<h1 id=\"마라톤으로-private-docker-registry-배포\">마라톤으로 private docker registry 배포</h1>\n<blockquote>\n<p>Marathon으로 docker registry를 배포하면서 겪은<br>\n어려움을 정리합니다</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>마라톤으로 private docker registry 배포</h1>\n<blockquote>\n<p>Marathon으로 docker registry를 배포하면서 겪은<br>\n어려움을 정리합니다</p>\n</blockquote>\n"},{"title":"마라톤 어플리케이션 - 1","catalog":true,"date":"2018-01-24T09:47:31.000Z","subtitle":null,"header-img":null,"_content":"\n> 아래 문서는 마라톤 공식Document를 번역 및 응용한 결과물입니다.\n(https://mesosphere.github.io/marathon/docs/application-basics.html)\n\n---\n\n# Mesos Marathon - Application Basic\n\n어플리케이션은 마라톤의 필수 기능입니다.\n각 어플리케이션은 일반적으로 여러 호스트에서 실행되는 많은 인스턴스가있는 long-running service를 나타냅니다.\n어플리케이션 인스턴스를 `Task`라고 부릅니다.\n`Application Definition`은 작업을 유지하고 시작하는데 필요한 모든것을 설명하는 녀석입니다~\n\n**주의사항**\n>  Marathon은 어플리케이션 이름에 점을 허용하지만 점으로 표시된 이름은 적절한 서비스 검색 동작을 방해 할 수 있습니다. 서비스 검색 매커니즘을 사용하려는 경우, 응용프로그램 이름에 점을 넣으면 안됩니다.\n\n정식 사이트에서는 Hello Marathon을 띄워보는 인라인쉘 스크립트를 소개하는데요\n같이 한번 도전해보겠습니다.\nstdout으로 print한 이후 5초동안 잠에드는 짓을 반복하는 변태같은 앱입니다.\n그에 관련된 JSON `Application Definition` 입니다.\n\n```json\n{\n    \"id\": \"basic-0\",\n    \"cmd\": \"while [ true ] ; do echo 'Hello Marathon' ; sleep 5 ; done\",\n    \"cpus\": 0.1,\n    \"mem\": 10.0,\n    \"instances\": 1\n}\n```\n\n애플리케이션을 정의하고 실행하면 Marathon이 Mesos로 실행을 넘겨줍니다.\nMesos는 각 작업에 대한 샌드박스 디렉토리를 만듭니다.\n샌드박스 디렉토리는 실행환경으로 작동하며 관련 로그 파일을 가진 각각의 에이전트 노드의 디렉토리입니다.\n또한 `stderr` 및 `stdout` 스트림도 샌드박스 디렉토리에 기록됩니다.\n![haha](basic-0.png)\n_[마라톤ui]잘돌아가고 있는 베이직제로 인스턴스!! 우측에 보면 Output log인 stdout을 받아봅시다_\n![anan](hellomarathon.png)\n_[stdout파일]\"넌 몰랐겠지만 난 찍고 있었어.\" 5초에 한번씩 열심히 찍고 있었습니다 그는_\n\n어떤 어플리케이션을 실행할려면 대게 파일 또는 파일모음에 의존해야됩니다.\n리소스 할당을 관리하기 위해서 마라톤은 `URI` 개념을 가지고 있습니다.\nURI는 Mesos Fetcher가 특정 리소스를 추출하기 위해 사용됩니다.\n\n일단 다음예제좀 같이 살펴보죠\n```json\n{\n    \"id\": \"basic-1\",\n    \"cmd\": \"`chmod u+x cool-script.sh && ./cool-script.sh`\",\n    \"cpus\": 0.1,\n    \"mem\": 10.0,\n    \"instances\": 1,\n    \"uris\": [\n        \"https://example.com/app/cool-script.sh\"\n    ]\n}\n```\n\n해당 Definition은 cmd를 실행시키기 이전에\n해당 uri에서 쉘스크립트 파일을 다운로드 받습니다. (메소스를 통해)\n그리고 앱의 작업 샌드박스에서 사용가능하도록 만듭니다.\n\n**참고**\n> 메소스 v.0.22이상에서 Fetcher코드는 더이상 다운로드한 파일을  \n기본적으로 실행 가능하게 만들지는 않습니다.\n위의 예에서 cmd는 파일을 실행가능하게 만듭니다.\n\n즉, 마라톤은 아카이브에 있는 애플리케이션 리소스를 처리하는 방법을 알고 있다는 말이에요.\n현재의 마라톤은 메소스를 통해 cmd를 실행하기전 각종 압축파일들을 압축풀기위한 첫번째 시도를 수행합니다.\n\n다음 예제는 마라톤이 압축리소스파일을 어떻게 다루는지 잘보여줍니다.\n```json\n{\n    \"id\": \"basic-2\",\n    \"cmd\": \"app/cool-script.sh\",\n    \"cpus\": 0.1,\n    \"mem\": 10.0,\n    \"instances\": 1,\n    \"uris\": [\n        \"https://example.com/app.zip\"\n    ]\n}\n```\n\n해당 uri의 압축파일에는 cool-script.sh가 포함되어 있습니다.\n집파일을 다운로드받아 압축을 풀면 zip파일의 내용이 추출되는 위치에 `app.zip` 파일 이름에 따른 디렉토리가 생성됩니다.\n그래서 위에 cmd에서 app이라는 디렉토리의 하위에 있는 스크립트를 실행합니다.\n\n## 도커기반 어플리케이션\n\n마라톤을 사용하면 Docker이미지를 사용하는 어플리케이션을 쉽게 실행할 수 있습니다.\n다음예제는 파이썬3 기반의 앱이며 portMappings라는 컨테이너 옵션을 통해 포트를 매핑합니다.\n호스트 포트는 메소스 에이전트의 임의의 포트에 할당되도록 0을 설정합니다.\n컨테이너 내부에서 웹서버 포트는 8080으로 뚫습니다.\n\n```json\n{\n  \"id\": \"basic-3\",\n  \"cmd\": \"python3 -m http.server 8080\",\n  \"cpus\": 0.5,\n  \"mem\": 32.0,\n  \"networks\": [ { \"mode\": \"container/bridge\" } ],\n  \"container\": {\n    \"type\": \"DOCKER\",\n    \"docker\": {\n      \"image\": \"python:3\"\n    },\n    \"portMappings\": [\n      { \"containerPort\": 8080, \"hostPort\": 0 }\n    ]\n  }\n}\n```\n\n이제 Terminal을 키고 Http API를 사용해서 앱을 배포해봅니다.\n위의 JSON 파일을 `basic-3.json` 으로 저장한뒤\n해당 디렉토리에가서 아래의 curl 명령문을 실행해봅니다.\n여러분이 터치할 부분은 어플리케이션 생성을 요청할 여러분의 마라톤 주소입니다.\n{marathon url} 여기에 여러분의 마라톤 주소를 넣어주세요!\n\n```curl\ncurl -X POST {marathon url}/v2/apps -d @basic-3.json -H \"Content-type: application/json\"\n```\n![nana](curl.png)\n_터미널 창에서 마라톤앱에 http요청을 보내보았습니다~ 요청된 basic-3.json의 디테일이 찍히네요_\n![suc](basic3running.png)\n_잘돌아갑니다_\n","source":"_posts/mesos-part-1.md","raw":"---\ntitle: \"마라톤 어플리케이션 - 1\"\ncatalog: true\ndate: 2018-01-24 18:47:31\nsubtitle:\nheader-img:\ntags:\n---\n\n> 아래 문서는 마라톤 공식Document를 번역 및 응용한 결과물입니다.\n(https://mesosphere.github.io/marathon/docs/application-basics.html)\n\n---\n\n# Mesos Marathon - Application Basic\n\n어플리케이션은 마라톤의 필수 기능입니다.\n각 어플리케이션은 일반적으로 여러 호스트에서 실행되는 많은 인스턴스가있는 long-running service를 나타냅니다.\n어플리케이션 인스턴스를 `Task`라고 부릅니다.\n`Application Definition`은 작업을 유지하고 시작하는데 필요한 모든것을 설명하는 녀석입니다~\n\n**주의사항**\n>  Marathon은 어플리케이션 이름에 점을 허용하지만 점으로 표시된 이름은 적절한 서비스 검색 동작을 방해 할 수 있습니다. 서비스 검색 매커니즘을 사용하려는 경우, 응용프로그램 이름에 점을 넣으면 안됩니다.\n\n정식 사이트에서는 Hello Marathon을 띄워보는 인라인쉘 스크립트를 소개하는데요\n같이 한번 도전해보겠습니다.\nstdout으로 print한 이후 5초동안 잠에드는 짓을 반복하는 변태같은 앱입니다.\n그에 관련된 JSON `Application Definition` 입니다.\n\n```json\n{\n    \"id\": \"basic-0\",\n    \"cmd\": \"while [ true ] ; do echo 'Hello Marathon' ; sleep 5 ; done\",\n    \"cpus\": 0.1,\n    \"mem\": 10.0,\n    \"instances\": 1\n}\n```\n\n애플리케이션을 정의하고 실행하면 Marathon이 Mesos로 실행을 넘겨줍니다.\nMesos는 각 작업에 대한 샌드박스 디렉토리를 만듭니다.\n샌드박스 디렉토리는 실행환경으로 작동하며 관련 로그 파일을 가진 각각의 에이전트 노드의 디렉토리입니다.\n또한 `stderr` 및 `stdout` 스트림도 샌드박스 디렉토리에 기록됩니다.\n![haha](basic-0.png)\n_[마라톤ui]잘돌아가고 있는 베이직제로 인스턴스!! 우측에 보면 Output log인 stdout을 받아봅시다_\n![anan](hellomarathon.png)\n_[stdout파일]\"넌 몰랐겠지만 난 찍고 있었어.\" 5초에 한번씩 열심히 찍고 있었습니다 그는_\n\n어떤 어플리케이션을 실행할려면 대게 파일 또는 파일모음에 의존해야됩니다.\n리소스 할당을 관리하기 위해서 마라톤은 `URI` 개념을 가지고 있습니다.\nURI는 Mesos Fetcher가 특정 리소스를 추출하기 위해 사용됩니다.\n\n일단 다음예제좀 같이 살펴보죠\n```json\n{\n    \"id\": \"basic-1\",\n    \"cmd\": \"`chmod u+x cool-script.sh && ./cool-script.sh`\",\n    \"cpus\": 0.1,\n    \"mem\": 10.0,\n    \"instances\": 1,\n    \"uris\": [\n        \"https://example.com/app/cool-script.sh\"\n    ]\n}\n```\n\n해당 Definition은 cmd를 실행시키기 이전에\n해당 uri에서 쉘스크립트 파일을 다운로드 받습니다. (메소스를 통해)\n그리고 앱의 작업 샌드박스에서 사용가능하도록 만듭니다.\n\n**참고**\n> 메소스 v.0.22이상에서 Fetcher코드는 더이상 다운로드한 파일을  \n기본적으로 실행 가능하게 만들지는 않습니다.\n위의 예에서 cmd는 파일을 실행가능하게 만듭니다.\n\n즉, 마라톤은 아카이브에 있는 애플리케이션 리소스를 처리하는 방법을 알고 있다는 말이에요.\n현재의 마라톤은 메소스를 통해 cmd를 실행하기전 각종 압축파일들을 압축풀기위한 첫번째 시도를 수행합니다.\n\n다음 예제는 마라톤이 압축리소스파일을 어떻게 다루는지 잘보여줍니다.\n```json\n{\n    \"id\": \"basic-2\",\n    \"cmd\": \"app/cool-script.sh\",\n    \"cpus\": 0.1,\n    \"mem\": 10.0,\n    \"instances\": 1,\n    \"uris\": [\n        \"https://example.com/app.zip\"\n    ]\n}\n```\n\n해당 uri의 압축파일에는 cool-script.sh가 포함되어 있습니다.\n집파일을 다운로드받아 압축을 풀면 zip파일의 내용이 추출되는 위치에 `app.zip` 파일 이름에 따른 디렉토리가 생성됩니다.\n그래서 위에 cmd에서 app이라는 디렉토리의 하위에 있는 스크립트를 실행합니다.\n\n## 도커기반 어플리케이션\n\n마라톤을 사용하면 Docker이미지를 사용하는 어플리케이션을 쉽게 실행할 수 있습니다.\n다음예제는 파이썬3 기반의 앱이며 portMappings라는 컨테이너 옵션을 통해 포트를 매핑합니다.\n호스트 포트는 메소스 에이전트의 임의의 포트에 할당되도록 0을 설정합니다.\n컨테이너 내부에서 웹서버 포트는 8080으로 뚫습니다.\n\n```json\n{\n  \"id\": \"basic-3\",\n  \"cmd\": \"python3 -m http.server 8080\",\n  \"cpus\": 0.5,\n  \"mem\": 32.0,\n  \"networks\": [ { \"mode\": \"container/bridge\" } ],\n  \"container\": {\n    \"type\": \"DOCKER\",\n    \"docker\": {\n      \"image\": \"python:3\"\n    },\n    \"portMappings\": [\n      { \"containerPort\": 8080, \"hostPort\": 0 }\n    ]\n  }\n}\n```\n\n이제 Terminal을 키고 Http API를 사용해서 앱을 배포해봅니다.\n위의 JSON 파일을 `basic-3.json` 으로 저장한뒤\n해당 디렉토리에가서 아래의 curl 명령문을 실행해봅니다.\n여러분이 터치할 부분은 어플리케이션 생성을 요청할 여러분의 마라톤 주소입니다.\n{marathon url} 여기에 여러분의 마라톤 주소를 넣어주세요!\n\n```curl\ncurl -X POST {marathon url}/v2/apps -d @basic-3.json -H \"Content-type: application/json\"\n```\n![nana](curl.png)\n_터미널 창에서 마라톤앱에 http요청을 보내보았습니다~ 요청된 basic-3.json의 디테일이 찍히네요_\n![suc](basic3running.png)\n_잘돌아갑니다_\n","slug":"mesos-part-1","published":1,"updated":"2018-02-01T07:04:11.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3yp69d000brxtya635nebr","content":"<blockquote>\n<p>아래 문서는 마라톤 공식Document를 번역 및 응용한 결과물입니다.<br>\n(<a href=\"https://mesosphere.github.io/marathon/docs/application-basics.html\" target=\"_blank\" rel=\"external\">https://mesosphere.github.io/marathon/docs/application-basics.html</a>)</p>\n</blockquote>\n<hr>\n<h1 id=\"mesos-marathon-application-basic\">Mesos Marathon - Application Basic</h1>\n<p>어플리케이션은 마라톤의 필수 기능입니다.<br>\n각 어플리케이션은 일반적으로 여러 호스트에서 실행되는 많은 인스턴스가있는 long-running service를 나타냅니다.<br>\n어플리케이션 인스턴스를 <code>Task</code>라고 부릅니다.<br>\n<code>Application Definition</code>은 작업을 유지하고 시작하는데 필요한 모든것을 설명하는 녀석입니다~</p>\n<p><strong>주의사항</strong></p>\n<blockquote>\n<p>Marathon은 어플리케이션 이름에 점을 허용하지만 점으로 표시된 이름은 적절한 서비스 검색 동작을 방해 할 수 있습니다. 서비스 검색 매커니즘을 사용하려는 경우, 응용프로그램 이름에 점을 넣으면 안됩니다.</p>\n</blockquote>\n<p>정식 사이트에서는 Hello Marathon을 띄워보는 인라인쉘 스크립트를 소개하는데요<br>\n같이 한번 도전해보겠습니다.<br>\nstdout으로 print한 이후 5초동안 잠에드는 짓을 반복하는 변태같은 앱입니다.<br>\n그에 관련된 JSON <code>Application Definition</code> 입니다.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"basic-0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"cmd\"</span>: <span class=\"string\">\"while [ true ] ; do echo 'Hello Marathon' ; sleep 5 ; done\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"cpus\"</span>: <span class=\"number\">0.1</span>,</div><div class=\"line\">    <span class=\"attr\">\"mem\"</span>: <span class=\"number\">10.0</span>,</div><div class=\"line\">    <span class=\"attr\">\"instances\"</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>애플리케이션을 정의하고 실행하면 Marathon이 Mesos로 실행을 넘겨줍니다.<br>\nMesos는 각 작업에 대한 샌드박스 디렉토리를 만듭니다.<br>\n샌드박스 디렉토리는 실행환경으로 작동하며 관련 로그 파일을 가진 각각의 에이전트 노드의 디렉토리입니다.<br>\n또한 <code>stderr</code> 및 <code>stdout</code> 스트림도 샌드박스 디렉토리에 기록됩니다.<br>\n<img src=\"basic-0.png\" alt=\"haha\"><br>\n<em>[마라톤ui]잘돌아가고 있는 베이직제로 인스턴스!! 우측에 보면 Output log인 stdout을 받아봅시다</em><br>\n<img src=\"hellomarathon.png\" alt=\"anan\"><br>\n<em>[stdout파일]“넌 몰랐겠지만 난 찍고 있었어.” 5초에 한번씩 열심히 찍고 있었습니다 그는</em></p>\n<p>어떤 어플리케이션을 실행할려면 대게 파일 또는 파일모음에 의존해야됩니다.<br>\n리소스 할당을 관리하기 위해서 마라톤은 <code>URI</code> 개념을 가지고 있습니다.<br>\nURI는 Mesos Fetcher가 특정 리소스를 추출하기 위해 사용됩니다.</p>\n<p>일단 다음예제좀 같이 살펴보죠</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"basic-1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"cmd\"</span>: <span class=\"string\">\"`chmod u+x cool-script.sh &amp;&amp; ./cool-script.sh`\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"cpus\"</span>: <span class=\"number\">0.1</span>,</div><div class=\"line\">    <span class=\"attr\">\"mem\"</span>: <span class=\"number\">10.0</span>,</div><div class=\"line\">    <span class=\"attr\">\"instances\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"uris\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"https://example.com/app/cool-script.sh\"</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>해당 Definition은 cmd를 실행시키기 이전에<br>\n해당 uri에서 쉘스크립트 파일을 다운로드 받습니다. (메소스를 통해)<br>\n그리고 앱의 작업 샌드박스에서 사용가능하도록 만듭니다.</p>\n<p><strong>참고</strong></p>\n<blockquote>\n<p>메소스 v.0.22이상에서 Fetcher코드는 더이상 다운로드한 파일을<br>\n기본적으로 실행 가능하게 만들지는 않습니다.<br>\n위의 예에서 cmd는 파일을 실행가능하게 만듭니다.</p>\n</blockquote>\n<p>즉, 마라톤은 아카이브에 있는 애플리케이션 리소스를 처리하는 방법을 알고 있다는 말이에요.<br>\n현재의 마라톤은 메소스를 통해 cmd를 실행하기전 각종 압축파일들을 압축풀기위한 첫번째 시도를 수행합니다.</p>\n<p>다음 예제는 마라톤이 압축리소스파일을 어떻게 다루는지 잘보여줍니다.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"basic-2\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"cmd\"</span>: <span class=\"string\">\"app/cool-script.sh\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"cpus\"</span>: <span class=\"number\">0.1</span>,</div><div class=\"line\">    <span class=\"attr\">\"mem\"</span>: <span class=\"number\">10.0</span>,</div><div class=\"line\">    <span class=\"attr\">\"instances\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"uris\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"https://example.com/app.zip\"</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>해당 uri의 압축파일에는 cool-script.sh가 포함되어 있습니다.<br>\n집파일을 다운로드받아 압축을 풀면 zip파일의 내용이 추출되는 위치에 <code>app.zip</code> 파일 이름에 따른 디렉토리가 생성됩니다.<br>\n그래서 위에 cmd에서 app이라는 디렉토리의 하위에 있는 스크립트를 실행합니다.</p>\n<h2 id=\"도커기반-어플리케이션\">도커기반 어플리케이션</h2>\n<p>마라톤을 사용하면 Docker이미지를 사용하는 어플리케이션을 쉽게 실행할 수 있습니다.<br>\n다음예제는 파이썬3 기반의 앱이며 portMappings라는 컨테이너 옵션을 통해 포트를 매핑합니다.<br>\n호스트 포트는 메소스 에이전트의 임의의 포트에 할당되도록 0을 설정합니다.<br>\n컨테이너 내부에서 웹서버 포트는 8080으로 뚫습니다.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"basic-3\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"cmd\"</span>: <span class=\"string\">\"python3 -m http.server 8080\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"cpus\"</span>: <span class=\"number\">0.5</span>,</div><div class=\"line\">  <span class=\"attr\">\"mem\"</span>: <span class=\"number\">32.0</span>,</div><div class=\"line\">  <span class=\"attr\">\"networks\"</span>: [ &#123; <span class=\"attr\">\"mode\"</span>: <span class=\"string\">\"container/bridge\"</span> &#125; ],</div><div class=\"line\">  <span class=\"attr\">\"container\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"DOCKER\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"docker\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"image\"</span>: <span class=\"string\">\"python:3\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"portMappings\"</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">\"containerPort\"</span>: <span class=\"number\">8080</span>, <span class=\"attr\">\"hostPort\"</span>: <span class=\"number\">0</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>이제 Terminal을 키고 Http API를 사용해서 앱을 배포해봅니다.<br>\n위의 JSON 파일을 <code>basic-3.json</code> 으로 저장한뒤<br>\n해당 디렉토리에가서 아래의 curl 명령문을 실행해봅니다.<br>\n여러분이 터치할 부분은 어플리케이션 생성을 요청할 여러분의 마라톤 주소입니다.<br>\n{marathon url} 여기에 여러분의 마라톤 주소를 넣어주세요!</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -X POST &#123;marathon url&#125;/v2/apps -d @basic-3.json -H &quot;Content-type: application/json&quot;</div></pre></td></tr></table></figure>\n<p><img src=\"curl.png\" alt=\"nana\"><br>\n<em>터미널 창에서 마라톤앱에 http요청을 보내보았습니다~ 요청된 basic-3.json의 디테일이 찍히네요</em><br>\n<img src=\"basic3running.png\" alt=\"suc\"><br>\n<em>잘돌아갑니다</em></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>아래 문서는 마라톤 공식Document를 번역 및 응용한 결과물입니다.<br>\n(<a href=\"https://mesosphere.github.io/marathon/docs/application-basics.html\" target=\"_blank\" rel=\"external\">https://mesosphere.github.io/marathon/docs/application-basics.html</a>)</p>\n</blockquote>\n<hr>\n<h1>Mesos Marathon - Application Basic</h1>\n<p>어플리케이션은 마라톤의 필수 기능입니다.<br>\n각 어플리케이션은 일반적으로 여러 호스트에서 실행되는 많은 인스턴스가있는 long-running service를 나타냅니다.<br>\n어플리케이션 인스턴스를 <code>Task</code>라고 부릅니다.<br>\n<code>Application Definition</code>은 작업을 유지하고 시작하는데 필요한 모든것을 설명하는 녀석입니다~</p>\n<p><strong>주의사항</strong></p>\n<blockquote>\n<p>Marathon은 어플리케이션 이름에 점을 허용하지만 점으로 표시된 이름은 적절한 서비스 검색 동작을 방해 할 수 있습니다. 서비스 검색 매커니즘을 사용하려는 경우, 응용프로그램 이름에 점을 넣으면 안됩니다.</p>\n</blockquote>\n<p>정식 사이트에서는 Hello Marathon을 띄워보는 인라인쉘 스크립트를 소개하는데요<br>\n같이 한번 도전해보겠습니다.<br>\nstdout으로 print한 이후 5초동안 잠에드는 짓을 반복하는 변태같은 앱입니다.<br>\n그에 관련된 JSON <code>Application Definition</code> 입니다.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"basic-0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"cmd\"</span>: <span class=\"string\">\"while [ true ] ; do echo 'Hello Marathon' ; sleep 5 ; done\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"cpus\"</span>: <span class=\"number\">0.1</span>,</div><div class=\"line\">    <span class=\"attr\">\"mem\"</span>: <span class=\"number\">10.0</span>,</div><div class=\"line\">    <span class=\"attr\">\"instances\"</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>애플리케이션을 정의하고 실행하면 Marathon이 Mesos로 실행을 넘겨줍니다.<br>\nMesos는 각 작업에 대한 샌드박스 디렉토리를 만듭니다.<br>\n샌드박스 디렉토리는 실행환경으로 작동하며 관련 로그 파일을 가진 각각의 에이전트 노드의 디렉토리입니다.<br>\n또한 <code>stderr</code> 및 <code>stdout</code> 스트림도 샌드박스 디렉토리에 기록됩니다.<br>\n<img src=\"basic-0.png\" alt=\"haha\"><br>\n<em>[마라톤ui]잘돌아가고 있는 베이직제로 인스턴스!! 우측에 보면 Output log인 stdout을 받아봅시다</em><br>\n<img src=\"hellomarathon.png\" alt=\"anan\"><br>\n<em>[stdout파일]“넌 몰랐겠지만 난 찍고 있었어.” 5초에 한번씩 열심히 찍고 있었습니다 그는</em></p>\n<p>어떤 어플리케이션을 실행할려면 대게 파일 또는 파일모음에 의존해야됩니다.<br>\n리소스 할당을 관리하기 위해서 마라톤은 <code>URI</code> 개념을 가지고 있습니다.<br>\nURI는 Mesos Fetcher가 특정 리소스를 추출하기 위해 사용됩니다.</p>\n<p>일단 다음예제좀 같이 살펴보죠</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"basic-1\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"cmd\"</span>: <span class=\"string\">\"`chmod u+x cool-script.sh &amp;&amp; ./cool-script.sh`\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"cpus\"</span>: <span class=\"number\">0.1</span>,</div><div class=\"line\">    <span class=\"attr\">\"mem\"</span>: <span class=\"number\">10.0</span>,</div><div class=\"line\">    <span class=\"attr\">\"instances\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"uris\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"https://example.com/app/cool-script.sh\"</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>해당 Definition은 cmd를 실행시키기 이전에<br>\n해당 uri에서 쉘스크립트 파일을 다운로드 받습니다. (메소스를 통해)<br>\n그리고 앱의 작업 샌드박스에서 사용가능하도록 만듭니다.</p>\n<p><strong>참고</strong></p>\n<blockquote>\n<p>메소스 v.0.22이상에서 Fetcher코드는 더이상 다운로드한 파일을<br>\n기본적으로 실행 가능하게 만들지는 않습니다.<br>\n위의 예에서 cmd는 파일을 실행가능하게 만듭니다.</p>\n</blockquote>\n<p>즉, 마라톤은 아카이브에 있는 애플리케이션 리소스를 처리하는 방법을 알고 있다는 말이에요.<br>\n현재의 마라톤은 메소스를 통해 cmd를 실행하기전 각종 압축파일들을 압축풀기위한 첫번째 시도를 수행합니다.</p>\n<p>다음 예제는 마라톤이 압축리소스파일을 어떻게 다루는지 잘보여줍니다.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"basic-2\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"cmd\"</span>: <span class=\"string\">\"app/cool-script.sh\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"cpus\"</span>: <span class=\"number\">0.1</span>,</div><div class=\"line\">    <span class=\"attr\">\"mem\"</span>: <span class=\"number\">10.0</span>,</div><div class=\"line\">    <span class=\"attr\">\"instances\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"uris\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"https://example.com/app.zip\"</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>해당 uri의 압축파일에는 cool-script.sh가 포함되어 있습니다.<br>\n집파일을 다운로드받아 압축을 풀면 zip파일의 내용이 추출되는 위치에 <code>app.zip</code> 파일 이름에 따른 디렉토리가 생성됩니다.<br>\n그래서 위에 cmd에서 app이라는 디렉토리의 하위에 있는 스크립트를 실행합니다.</p>\n<h2>도커기반 어플리케이션</h2>\n<p>마라톤을 사용하면 Docker이미지를 사용하는 어플리케이션을 쉽게 실행할 수 있습니다.<br>\n다음예제는 파이썬3 기반의 앱이며 portMappings라는 컨테이너 옵션을 통해 포트를 매핑합니다.<br>\n호스트 포트는 메소스 에이전트의 임의의 포트에 할당되도록 0을 설정합니다.<br>\n컨테이너 내부에서 웹서버 포트는 8080으로 뚫습니다.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"basic-3\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"cmd\"</span>: <span class=\"string\">\"python3 -m http.server 8080\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"cpus\"</span>: <span class=\"number\">0.5</span>,</div><div class=\"line\">  <span class=\"attr\">\"mem\"</span>: <span class=\"number\">32.0</span>,</div><div class=\"line\">  <span class=\"attr\">\"networks\"</span>: [ &#123; <span class=\"attr\">\"mode\"</span>: <span class=\"string\">\"container/bridge\"</span> &#125; ],</div><div class=\"line\">  <span class=\"attr\">\"container\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"DOCKER\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"docker\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"image\"</span>: <span class=\"string\">\"python:3\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"portMappings\"</span>: [</div><div class=\"line\">      &#123; <span class=\"attr\">\"containerPort\"</span>: <span class=\"number\">8080</span>, <span class=\"attr\">\"hostPort\"</span>: <span class=\"number\">0</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>이제 Terminal을 키고 Http API를 사용해서 앱을 배포해봅니다.<br>\n위의 JSON 파일을 <code>basic-3.json</code> 으로 저장한뒤<br>\n해당 디렉토리에가서 아래의 curl 명령문을 실행해봅니다.<br>\n여러분이 터치할 부분은 어플리케이션 생성을 요청할 여러분의 마라톤 주소입니다.<br>\n{marathon url} 여기에 여러분의 마라톤 주소를 넣어주세요!</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -X POST &#123;marathon url&#125;/v2/apps -d @basic-3.json -H &quot;Content-type: application/json&quot;</div></pre></td></tr></table></figure>\n<p><img src=\"curl.png\" alt=\"nana\"><br>\n<em>터미널 창에서 마라톤앱에 http요청을 보내보았습니다~ 요청된 basic-3.json의 디테일이 찍히네요</em><br>\n<img src=\"basic3running.png\" alt=\"suc\"><br>\n<em>잘돌아갑니다</em></p>\n"},{"title":"마라톤 어플리케이션 - 2","catalog":true,"date":"2018-01-25T02:14:48.000Z","subtitle":null,"header-img":null,"_content":"\n> 아래 문서는 마라톤 공식Document를 번역 및 응용한 결과물입니다.\n(https://mesosphere.github.io/marathon/docs/deployments.html)\n\n---\n# Marathon Application Deployment\n마라톤 어플리케이션 배포\n\n마라톤에서 어플리케이션 또는 그룹의 정의가 변경 될 때마다 배포가 수행됩니다.\n배포는 다음 작업을 수행 할 수 있는 일련의 작업입니다.\n\n- 하나 이상의 어플리케이션을 시작 또는 중지\n- 하나 이상의 어플리케이션을 업그레이드\n- 하나 이상의 어플리케이션을 스케일조정\n\n배포에는 시간이 걸리고 즉시 사용할 수 없습니다.\n성공적으로 마칠 때까지 마라톤에서 배포가 활성된 것으로 간주.\n\n\n## 종속성\n종속성이 없는 어플리케이션은 제한없이 순서에 상관없이 배포할 수 있습니다.\n하지만 있는 경우에는 필요한 순서로 배치 작업이 수행됩니다.\n\n![hoho](dependency.png)\n\n### 데이터베이스\n\n- Starting: 만약 DB 와 어플리케이션이 시스템에 추가되면. db가 앱보다 먼저 실행됩니다.\n- Stopping: 만약 DB와 어플리케이션이 시스템에서 제거되면. 앱이먼저 제거되고 나서 디비가 제거됩니다.\n- Upgrade: 롤링 재시작\n- Scaling: 만약 디비와 앱이 스케일링을 하는 경우, 디비가 먼저 반응하고나서 앱이 반응합니다.\n\n\n## Rolling Restarts\n롤링 재시작은 마라톤이 새버전의 어플리케이션을 배포하는데 사용됩니다.\n일반적으로 새버전의 앱을 배포하는데에는 두단계가 필요합니다.\n- 새 버전으로 일련의 프로세스를 시작하고\n- 이전버전의 프로세스 집합을 중지하는 것입니다.\n\n마라톤에서 롤링재시작을 할 수 있습니다. 업그레이드 전략 `minimumHealthCapacity` 을 정의합니다.\n\n`minimumHealthCapacity`는 인스턴스 카운트에 적용될 때 업데이트 중\n특정 버전의 응용 프로그램이 항상 유지해야하는 정상 인스턴스 수를 정의하는 `백분율`입니다.\n\n- minimumHealthCapacity == 0: 새 버전이 배포되기 전에 `모든 이전 인스턴스가 종료` 될 수 있습니다.\n- minimumHealthCapacity == 1: 이전 버전이 중지되기 전에 새 버전의 모든 인스턴스가 나란히 배치됩니다.\n- minimumHealthCapacity 0에서 1사이: 이전 버전을 minimumHealthCapacity로 확장하고          \nminimumHealthCapacity과 나란히 새버전을 시작합니다. 이 작업이 성공적으로 진행되면 새 버전의 크기가 100%로 조정되고 이전 버전이 중지됩니다.\n\n의존성이 있다면 이것은 더 복잡해집니다.\n위의 예에서 응용 프로그램이 업데이트되면 Marathon은 다음 작업을 수행합니다.\n\n1. 모든 인스턴스가 대체되고 준비가 완료될때까지 applicaiton db를 업그레이드한다.\n2. 모든 인스턴스가 교체되고 준비가 되었으며, Healthy 할 때까지 응용 프로그램을 업그레이드 (upgradeStrategy 고려사항)\n\n**참고**\nminimumHealthCapacity 0.5 이상을 선택하면 클러스터의 업데이트 프로세스에 사용할 수 있는 용량이 더 있어야합니다. 만약 minimumHealthCapacity 0.5보다 더 동일한 앱의 인스턴스의 절반 이상이 나란히 실행된다. 이러한 용량 제약 조건은 종속성이 있는 경우 함께 추가됩니다. 우리의 예에서는 db에 0.6 app에 0.8을 정의했습니다.\n즉, 업데이트가 실행되면 12개의 db인스턴스와 32개의 app 인스턴스(16개 및 16개 신규)가 나란히 실행됩니다.\n\n\n## Force a Deployment\n애플리케이션은 한번에 하나의 배포로만 변경할 수 있습니다.\n앱의 다른 변경사항은 첫번째 배포가 완료 될 때까지 대기해야합니다.\n강제 플래그를 사용하여 배치를 실행하여 이 규칙을 어길 수 있습니다.\nREST 인터페이스는 모든 상태 변경 조작에 강제 플래그를 허용합니다.\n\n주의: force플래그는 배포가 실패한 경우에만 사용해야합니다!\n\n강제 플래그가 설정되면 이 배포의 영향을 받는 모든 배포가 취소됩니다. 이 작업으로 인해 시스템이 일관성 없는 상태로 남을 수 있습니다. 특히 앱이 롤링 업그레이드 중에 있을 때 배포가 취소되면 일부 오래된 작업과 일부 새로운 작업이 실행되는 상태가 될 수 있습니다. 새 배포로 해당 응용 프로그램이 업데이트 되지 않으면 해당 어플에 대한 이후 배포가 이루어질 때까지 해당 배포가 해당 상태로 유지됩니다.\n\n안전하게 강제 업데이트 할 수 있는 유일한 배포 유형은 단일 앱에만 영향을 미치는 배포 유형뿐입니다.\n여러 앱에 영향을 주는 배포를 강제하는 유일한 이유는 실패한 배포를 해결하기 위해서입니다.\n\n## A Failed Deployment\n실패한 배포\n배포는 하나씩 차례로 실행되는 단계로 구성됩니다.\n다음 단계는 이전 단계가 성공적으로 완료된 경우에만 실행됩니다.\n단계가 성공적으로 끝나지 않을 상황이 있습니다. 다음은 그 상황들입니다.\n\n- 새 어플리케이션이 올바르게 시작되지 않았다.\n- 새로운 어플리케이션이 heathy상태가 되지않는다.\n- 새 어플리케이션의 종속성이 선언되지 않았으므로 사용할 수 없습니다.\n- 클러스터 용량이 소진되었습니다.\n- 앱은 도커 컨테이너를 사용하며 마라톤에서 도커컨테이너 실행시 구성변경이 이루어지지 않았습니다.\n\n이런경우 배포는 영원히 수행됩니다. 시스템을 치료하려면 현재 배포의 문제를 해결하고 새로운 배포를 적용해야합니다.\n\n## /v2/deployments endpoint\n\n실행중인 배포목록은 /v2/deployments endpoint를 통해 엑세스할 수 있습니다. 모든 배포에 사용할 수 있는 몇가지 정보가 있습니다.\n\n- affectedApps: 이 배포의 영향을 받는 어플리케이션\n- steps: 이 배포를 위해 수행할 단계입니다\n- currentStep: 현재 수행하고 있는 단계.\n\n모든 단계는 몇가지 액션들을 가지고 있습니다. 단계 내 액션들은 동시에 수행됩니다. 가능한 액션은 다음과같다\n\n- StartApplication: 지정된 어플리케이션을 시작하십시오.\n- StopApplication: 지정된 어플리케이션을 중지하십시오.\n- ScaleApplication: 지정된 어플리케이션의 크기를 조정합니다.\n- RestartApplication: 지정된 어플리케이션을 minimumHealthCapacity\n- KillAllOldTasksOf: 지정된 어플리케이션의 나머지작업을 종료.\n","source":"_posts/mesos-part-2.md","raw":"---\ntitle: \"마라톤 어플리케이션 - 2\"\ncatalog: true\ndate: 2018-01-25 11:14:48\nsubtitle:\nheader-img:\ntags:\n---\n\n> 아래 문서는 마라톤 공식Document를 번역 및 응용한 결과물입니다.\n(https://mesosphere.github.io/marathon/docs/deployments.html)\n\n---\n# Marathon Application Deployment\n마라톤 어플리케이션 배포\n\n마라톤에서 어플리케이션 또는 그룹의 정의가 변경 될 때마다 배포가 수행됩니다.\n배포는 다음 작업을 수행 할 수 있는 일련의 작업입니다.\n\n- 하나 이상의 어플리케이션을 시작 또는 중지\n- 하나 이상의 어플리케이션을 업그레이드\n- 하나 이상의 어플리케이션을 스케일조정\n\n배포에는 시간이 걸리고 즉시 사용할 수 없습니다.\n성공적으로 마칠 때까지 마라톤에서 배포가 활성된 것으로 간주.\n\n\n## 종속성\n종속성이 없는 어플리케이션은 제한없이 순서에 상관없이 배포할 수 있습니다.\n하지만 있는 경우에는 필요한 순서로 배치 작업이 수행됩니다.\n\n![hoho](dependency.png)\n\n### 데이터베이스\n\n- Starting: 만약 DB 와 어플리케이션이 시스템에 추가되면. db가 앱보다 먼저 실행됩니다.\n- Stopping: 만약 DB와 어플리케이션이 시스템에서 제거되면. 앱이먼저 제거되고 나서 디비가 제거됩니다.\n- Upgrade: 롤링 재시작\n- Scaling: 만약 디비와 앱이 스케일링을 하는 경우, 디비가 먼저 반응하고나서 앱이 반응합니다.\n\n\n## Rolling Restarts\n롤링 재시작은 마라톤이 새버전의 어플리케이션을 배포하는데 사용됩니다.\n일반적으로 새버전의 앱을 배포하는데에는 두단계가 필요합니다.\n- 새 버전으로 일련의 프로세스를 시작하고\n- 이전버전의 프로세스 집합을 중지하는 것입니다.\n\n마라톤에서 롤링재시작을 할 수 있습니다. 업그레이드 전략 `minimumHealthCapacity` 을 정의합니다.\n\n`minimumHealthCapacity`는 인스턴스 카운트에 적용될 때 업데이트 중\n특정 버전의 응용 프로그램이 항상 유지해야하는 정상 인스턴스 수를 정의하는 `백분율`입니다.\n\n- minimumHealthCapacity == 0: 새 버전이 배포되기 전에 `모든 이전 인스턴스가 종료` 될 수 있습니다.\n- minimumHealthCapacity == 1: 이전 버전이 중지되기 전에 새 버전의 모든 인스턴스가 나란히 배치됩니다.\n- minimumHealthCapacity 0에서 1사이: 이전 버전을 minimumHealthCapacity로 확장하고          \nminimumHealthCapacity과 나란히 새버전을 시작합니다. 이 작업이 성공적으로 진행되면 새 버전의 크기가 100%로 조정되고 이전 버전이 중지됩니다.\n\n의존성이 있다면 이것은 더 복잡해집니다.\n위의 예에서 응용 프로그램이 업데이트되면 Marathon은 다음 작업을 수행합니다.\n\n1. 모든 인스턴스가 대체되고 준비가 완료될때까지 applicaiton db를 업그레이드한다.\n2. 모든 인스턴스가 교체되고 준비가 되었으며, Healthy 할 때까지 응용 프로그램을 업그레이드 (upgradeStrategy 고려사항)\n\n**참고**\nminimumHealthCapacity 0.5 이상을 선택하면 클러스터의 업데이트 프로세스에 사용할 수 있는 용량이 더 있어야합니다. 만약 minimumHealthCapacity 0.5보다 더 동일한 앱의 인스턴스의 절반 이상이 나란히 실행된다. 이러한 용량 제약 조건은 종속성이 있는 경우 함께 추가됩니다. 우리의 예에서는 db에 0.6 app에 0.8을 정의했습니다.\n즉, 업데이트가 실행되면 12개의 db인스턴스와 32개의 app 인스턴스(16개 및 16개 신규)가 나란히 실행됩니다.\n\n\n## Force a Deployment\n애플리케이션은 한번에 하나의 배포로만 변경할 수 있습니다.\n앱의 다른 변경사항은 첫번째 배포가 완료 될 때까지 대기해야합니다.\n강제 플래그를 사용하여 배치를 실행하여 이 규칙을 어길 수 있습니다.\nREST 인터페이스는 모든 상태 변경 조작에 강제 플래그를 허용합니다.\n\n주의: force플래그는 배포가 실패한 경우에만 사용해야합니다!\n\n강제 플래그가 설정되면 이 배포의 영향을 받는 모든 배포가 취소됩니다. 이 작업으로 인해 시스템이 일관성 없는 상태로 남을 수 있습니다. 특히 앱이 롤링 업그레이드 중에 있을 때 배포가 취소되면 일부 오래된 작업과 일부 새로운 작업이 실행되는 상태가 될 수 있습니다. 새 배포로 해당 응용 프로그램이 업데이트 되지 않으면 해당 어플에 대한 이후 배포가 이루어질 때까지 해당 배포가 해당 상태로 유지됩니다.\n\n안전하게 강제 업데이트 할 수 있는 유일한 배포 유형은 단일 앱에만 영향을 미치는 배포 유형뿐입니다.\n여러 앱에 영향을 주는 배포를 강제하는 유일한 이유는 실패한 배포를 해결하기 위해서입니다.\n\n## A Failed Deployment\n실패한 배포\n배포는 하나씩 차례로 실행되는 단계로 구성됩니다.\n다음 단계는 이전 단계가 성공적으로 완료된 경우에만 실행됩니다.\n단계가 성공적으로 끝나지 않을 상황이 있습니다. 다음은 그 상황들입니다.\n\n- 새 어플리케이션이 올바르게 시작되지 않았다.\n- 새로운 어플리케이션이 heathy상태가 되지않는다.\n- 새 어플리케이션의 종속성이 선언되지 않았으므로 사용할 수 없습니다.\n- 클러스터 용량이 소진되었습니다.\n- 앱은 도커 컨테이너를 사용하며 마라톤에서 도커컨테이너 실행시 구성변경이 이루어지지 않았습니다.\n\n이런경우 배포는 영원히 수행됩니다. 시스템을 치료하려면 현재 배포의 문제를 해결하고 새로운 배포를 적용해야합니다.\n\n## /v2/deployments endpoint\n\n실행중인 배포목록은 /v2/deployments endpoint를 통해 엑세스할 수 있습니다. 모든 배포에 사용할 수 있는 몇가지 정보가 있습니다.\n\n- affectedApps: 이 배포의 영향을 받는 어플리케이션\n- steps: 이 배포를 위해 수행할 단계입니다\n- currentStep: 현재 수행하고 있는 단계.\n\n모든 단계는 몇가지 액션들을 가지고 있습니다. 단계 내 액션들은 동시에 수행됩니다. 가능한 액션은 다음과같다\n\n- StartApplication: 지정된 어플리케이션을 시작하십시오.\n- StopApplication: 지정된 어플리케이션을 중지하십시오.\n- ScaleApplication: 지정된 어플리케이션의 크기를 조정합니다.\n- RestartApplication: 지정된 어플리케이션을 minimumHealthCapacity\n- KillAllOldTasksOf: 지정된 어플리케이션의 나머지작업을 종료.\n","slug":"mesos-part-2","published":1,"updated":"2018-02-01T07:03:49.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3yp69j000drxtyxpm81l4b","content":"<blockquote>\n<p>아래 문서는 마라톤 공식Document를 번역 및 응용한 결과물입니다.<br>\n(<a href=\"https://mesosphere.github.io/marathon/docs/deployments.html\" target=\"_blank\" rel=\"external\">https://mesosphere.github.io/marathon/docs/deployments.html</a>)</p>\n</blockquote>\n<hr>\n<h1 id=\"marathon-application-deployment\">Marathon Application Deployment</h1>\n<p>마라톤 어플리케이션 배포</p>\n<p>마라톤에서 어플리케이션 또는 그룹의 정의가 변경 될 때마다 배포가 수행됩니다.<br>\n배포는 다음 작업을 수행 할 수 있는 일련의 작업입니다.</p>\n<ul>\n<li>하나 이상의 어플리케이션을 시작 또는 중지</li>\n<li>하나 이상의 어플리케이션을 업그레이드</li>\n<li>하나 이상의 어플리케이션을 스케일조정</li>\n</ul>\n<p>배포에는 시간이 걸리고 즉시 사용할 수 없습니다.<br>\n성공적으로 마칠 때까지 마라톤에서 배포가 활성된 것으로 간주.</p>\n<h2 id=\"종속성\">종속성</h2>\n<p>종속성이 없는 어플리케이션은 제한없이 순서에 상관없이 배포할 수 있습니다.<br>\n하지만 있는 경우에는 필요한 순서로 배치 작업이 수행됩니다.</p>\n<p><img src=\"dependency.png\" alt=\"hoho\"></p>\n<h3 id=\"데이터베이스\">데이터베이스</h3>\n<ul>\n<li>Starting: 만약 DB 와 어플리케이션이 시스템에 추가되면. db가 앱보다 먼저 실행됩니다.</li>\n<li>Stopping: 만약 DB와 어플리케이션이 시스템에서 제거되면. 앱이먼저 제거되고 나서 디비가 제거됩니다.</li>\n<li>Upgrade: 롤링 재시작</li>\n<li>Scaling: 만약 디비와 앱이 스케일링을 하는 경우, 디비가 먼저 반응하고나서 앱이 반응합니다.</li>\n</ul>\n<h2 id=\"rolling-restarts\">Rolling Restarts</h2>\n<p>롤링 재시작은 마라톤이 새버전의 어플리케이션을 배포하는데 사용됩니다.<br>\n일반적으로 새버전의 앱을 배포하는데에는 두단계가 필요합니다.</p>\n<ul>\n<li>새 버전으로 일련의 프로세스를 시작하고</li>\n<li>이전버전의 프로세스 집합을 중지하는 것입니다.</li>\n</ul>\n<p>마라톤에서 롤링재시작을 할 수 있습니다. 업그레이드 전략 <code>minimumHealthCapacity</code> 을 정의합니다.</p>\n<p><code>minimumHealthCapacity</code>는 인스턴스 카운트에 적용될 때 업데이트 중<br>\n특정 버전의 응용 프로그램이 항상 유지해야하는 정상 인스턴스 수를 정의하는 <code>백분율</code>입니다.</p>\n<ul>\n<li>minimumHealthCapacity == 0: 새 버전이 배포되기 전에 <code>모든 이전 인스턴스가 종료</code> 될 수 있습니다.</li>\n<li>minimumHealthCapacity == 1: 이전 버전이 중지되기 전에 새 버전의 모든 인스턴스가 나란히 배치됩니다.</li>\n<li>minimumHealthCapacity 0에서 1사이: 이전 버전을 minimumHealthCapacity로 확장하고<br>\nminimumHealthCapacity과 나란히 새버전을 시작합니다. 이 작업이 성공적으로 진행되면 새 버전의 크기가 100%로 조정되고 이전 버전이 중지됩니다.</li>\n</ul>\n<p>의존성이 있다면 이것은 더 복잡해집니다.<br>\n위의 예에서 응용 프로그램이 업데이트되면 Marathon은 다음 작업을 수행합니다.</p>\n<ol>\n<li>모든 인스턴스가 대체되고 준비가 완료될때까지 applicaiton db를 업그레이드한다.</li>\n<li>모든 인스턴스가 교체되고 준비가 되었으며, Healthy 할 때까지 응용 프로그램을 업그레이드 (upgradeStrategy 고려사항)</li>\n</ol>\n<p><strong>참고</strong><br>\nminimumHealthCapacity 0.5 이상을 선택하면 클러스터의 업데이트 프로세스에 사용할 수 있는 용량이 더 있어야합니다. 만약 minimumHealthCapacity 0.5보다 더 동일한 앱의 인스턴스의 절반 이상이 나란히 실행된다. 이러한 용량 제약 조건은 종속성이 있는 경우 함께 추가됩니다. 우리의 예에서는 db에 0.6 app에 0.8을 정의했습니다.<br>\n즉, 업데이트가 실행되면 12개의 db인스턴스와 32개의 app 인스턴스(16개 및 16개 신규)가 나란히 실행됩니다.</p>\n<h2 id=\"force-a-deployment\">Force a Deployment</h2>\n<p>애플리케이션은 한번에 하나의 배포로만 변경할 수 있습니다.<br>\n앱의 다른 변경사항은 첫번째 배포가 완료 될 때까지 대기해야합니다.<br>\n강제 플래그를 사용하여 배치를 실행하여 이 규칙을 어길 수 있습니다.<br>\nREST 인터페이스는 모든 상태 변경 조작에 강제 플래그를 허용합니다.</p>\n<p>주의: force플래그는 배포가 실패한 경우에만 사용해야합니다!</p>\n<p>강제 플래그가 설정되면 이 배포의 영향을 받는 모든 배포가 취소됩니다. 이 작업으로 인해 시스템이 일관성 없는 상태로 남을 수 있습니다. 특히 앱이 롤링 업그레이드 중에 있을 때 배포가 취소되면 일부 오래된 작업과 일부 새로운 작업이 실행되는 상태가 될 수 있습니다. 새 배포로 해당 응용 프로그램이 업데이트 되지 않으면 해당 어플에 대한 이후 배포가 이루어질 때까지 해당 배포가 해당 상태로 유지됩니다.</p>\n<p>안전하게 강제 업데이트 할 수 있는 유일한 배포 유형은 단일 앱에만 영향을 미치는 배포 유형뿐입니다.<br>\n여러 앱에 영향을 주는 배포를 강제하는 유일한 이유는 실패한 배포를 해결하기 위해서입니다.</p>\n<h2 id=\"a-failed-deployment\">A Failed Deployment</h2>\n<p>실패한 배포<br>\n배포는 하나씩 차례로 실행되는 단계로 구성됩니다.<br>\n다음 단계는 이전 단계가 성공적으로 완료된 경우에만 실행됩니다.<br>\n단계가 성공적으로 끝나지 않을 상황이 있습니다. 다음은 그 상황들입니다.</p>\n<ul>\n<li>새 어플리케이션이 올바르게 시작되지 않았다.</li>\n<li>새로운 어플리케이션이 heathy상태가 되지않는다.</li>\n<li>새 어플리케이션의 종속성이 선언되지 않았으므로 사용할 수 없습니다.</li>\n<li>클러스터 용량이 소진되었습니다.</li>\n<li>앱은 도커 컨테이너를 사용하며 마라톤에서 도커컨테이너 실행시 구성변경이 이루어지지 않았습니다.</li>\n</ul>\n<p>이런경우 배포는 영원히 수행됩니다. 시스템을 치료하려면 현재 배포의 문제를 해결하고 새로운 배포를 적용해야합니다.</p>\n<h2 id=\"v2deployments-endpoint\">/v2/deployments endpoint</h2>\n<p>실행중인 배포목록은 /v2/deployments endpoint를 통해 엑세스할 수 있습니다. 모든 배포에 사용할 수 있는 몇가지 정보가 있습니다.</p>\n<ul>\n<li>affectedApps: 이 배포의 영향을 받는 어플리케이션</li>\n<li>steps: 이 배포를 위해 수행할 단계입니다</li>\n<li>currentStep: 현재 수행하고 있는 단계.</li>\n</ul>\n<p>모든 단계는 몇가지 액션들을 가지고 있습니다. 단계 내 액션들은 동시에 수행됩니다. 가능한 액션은 다음과같다</p>\n<ul>\n<li>StartApplication: 지정된 어플리케이션을 시작하십시오.</li>\n<li>StopApplication: 지정된 어플리케이션을 중지하십시오.</li>\n<li>ScaleApplication: 지정된 어플리케이션의 크기를 조정합니다.</li>\n<li>RestartApplication: 지정된 어플리케이션을 minimumHealthCapacity</li>\n<li>KillAllOldTasksOf: 지정된 어플리케이션의 나머지작업을 종료.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>아래 문서는 마라톤 공식Document를 번역 및 응용한 결과물입니다.<br>\n(<a href=\"https://mesosphere.github.io/marathon/docs/deployments.html\" target=\"_blank\" rel=\"external\">https://mesosphere.github.io/marathon/docs/deployments.html</a>)</p>\n</blockquote>\n<hr>\n<h1>Marathon Application Deployment</h1>\n<p>마라톤 어플리케이션 배포</p>\n<p>마라톤에서 어플리케이션 또는 그룹의 정의가 변경 될 때마다 배포가 수행됩니다.<br>\n배포는 다음 작업을 수행 할 수 있는 일련의 작업입니다.</p>\n<ul>\n<li>하나 이상의 어플리케이션을 시작 또는 중지</li>\n<li>하나 이상의 어플리케이션을 업그레이드</li>\n<li>하나 이상의 어플리케이션을 스케일조정</li>\n</ul>\n<p>배포에는 시간이 걸리고 즉시 사용할 수 없습니다.<br>\n성공적으로 마칠 때까지 마라톤에서 배포가 활성된 것으로 간주.</p>\n<h2>종속성</h2>\n<p>종속성이 없는 어플리케이션은 제한없이 순서에 상관없이 배포할 수 있습니다.<br>\n하지만 있는 경우에는 필요한 순서로 배치 작업이 수행됩니다.</p>\n<p><img src=\"dependency.png\" alt=\"hoho\"></p>\n<h3>데이터베이스</h3>\n<ul>\n<li>Starting: 만약 DB 와 어플리케이션이 시스템에 추가되면. db가 앱보다 먼저 실행됩니다.</li>\n<li>Stopping: 만약 DB와 어플리케이션이 시스템에서 제거되면. 앱이먼저 제거되고 나서 디비가 제거됩니다.</li>\n<li>Upgrade: 롤링 재시작</li>\n<li>Scaling: 만약 디비와 앱이 스케일링을 하는 경우, 디비가 먼저 반응하고나서 앱이 반응합니다.</li>\n</ul>\n<h2>Rolling Restarts</h2>\n<p>롤링 재시작은 마라톤이 새버전의 어플리케이션을 배포하는데 사용됩니다.<br>\n일반적으로 새버전의 앱을 배포하는데에는 두단계가 필요합니다.</p>\n<ul>\n<li>새 버전으로 일련의 프로세스를 시작하고</li>\n<li>이전버전의 프로세스 집합을 중지하는 것입니다.</li>\n</ul>\n<p>마라톤에서 롤링재시작을 할 수 있습니다. 업그레이드 전략 <code>minimumHealthCapacity</code> 을 정의합니다.</p>\n<p><code>minimumHealthCapacity</code>는 인스턴스 카운트에 적용될 때 업데이트 중<br>\n특정 버전의 응용 프로그램이 항상 유지해야하는 정상 인스턴스 수를 정의하는 <code>백분율</code>입니다.</p>\n<ul>\n<li>minimumHealthCapacity == 0: 새 버전이 배포되기 전에 <code>모든 이전 인스턴스가 종료</code> 될 수 있습니다.</li>\n<li>minimumHealthCapacity == 1: 이전 버전이 중지되기 전에 새 버전의 모든 인스턴스가 나란히 배치됩니다.</li>\n<li>minimumHealthCapacity 0에서 1사이: 이전 버전을 minimumHealthCapacity로 확장하고<br>\nminimumHealthCapacity과 나란히 새버전을 시작합니다. 이 작업이 성공적으로 진행되면 새 버전의 크기가 100%로 조정되고 이전 버전이 중지됩니다.</li>\n</ul>\n<p>의존성이 있다면 이것은 더 복잡해집니다.<br>\n위의 예에서 응용 프로그램이 업데이트되면 Marathon은 다음 작업을 수행합니다.</p>\n<ol>\n<li>모든 인스턴스가 대체되고 준비가 완료될때까지 applicaiton db를 업그레이드한다.</li>\n<li>모든 인스턴스가 교체되고 준비가 되었으며, Healthy 할 때까지 응용 프로그램을 업그레이드 (upgradeStrategy 고려사항)</li>\n</ol>\n<p><strong>참고</strong><br>\nminimumHealthCapacity 0.5 이상을 선택하면 클러스터의 업데이트 프로세스에 사용할 수 있는 용량이 더 있어야합니다. 만약 minimumHealthCapacity 0.5보다 더 동일한 앱의 인스턴스의 절반 이상이 나란히 실행된다. 이러한 용량 제약 조건은 종속성이 있는 경우 함께 추가됩니다. 우리의 예에서는 db에 0.6 app에 0.8을 정의했습니다.<br>\n즉, 업데이트가 실행되면 12개의 db인스턴스와 32개의 app 인스턴스(16개 및 16개 신규)가 나란히 실행됩니다.</p>\n<h2>Force a Deployment</h2>\n<p>애플리케이션은 한번에 하나의 배포로만 변경할 수 있습니다.<br>\n앱의 다른 변경사항은 첫번째 배포가 완료 될 때까지 대기해야합니다.<br>\n강제 플래그를 사용하여 배치를 실행하여 이 규칙을 어길 수 있습니다.<br>\nREST 인터페이스는 모든 상태 변경 조작에 강제 플래그를 허용합니다.</p>\n<p>주의: force플래그는 배포가 실패한 경우에만 사용해야합니다!</p>\n<p>강제 플래그가 설정되면 이 배포의 영향을 받는 모든 배포가 취소됩니다. 이 작업으로 인해 시스템이 일관성 없는 상태로 남을 수 있습니다. 특히 앱이 롤링 업그레이드 중에 있을 때 배포가 취소되면 일부 오래된 작업과 일부 새로운 작업이 실행되는 상태가 될 수 있습니다. 새 배포로 해당 응용 프로그램이 업데이트 되지 않으면 해당 어플에 대한 이후 배포가 이루어질 때까지 해당 배포가 해당 상태로 유지됩니다.</p>\n<p>안전하게 강제 업데이트 할 수 있는 유일한 배포 유형은 단일 앱에만 영향을 미치는 배포 유형뿐입니다.<br>\n여러 앱에 영향을 주는 배포를 강제하는 유일한 이유는 실패한 배포를 해결하기 위해서입니다.</p>\n<h2>A Failed Deployment</h2>\n<p>실패한 배포<br>\n배포는 하나씩 차례로 실행되는 단계로 구성됩니다.<br>\n다음 단계는 이전 단계가 성공적으로 완료된 경우에만 실행됩니다.<br>\n단계가 성공적으로 끝나지 않을 상황이 있습니다. 다음은 그 상황들입니다.</p>\n<ul>\n<li>새 어플리케이션이 올바르게 시작되지 않았다.</li>\n<li>새로운 어플리케이션이 heathy상태가 되지않는다.</li>\n<li>새 어플리케이션의 종속성이 선언되지 않았으므로 사용할 수 없습니다.</li>\n<li>클러스터 용량이 소진되었습니다.</li>\n<li>앱은 도커 컨테이너를 사용하며 마라톤에서 도커컨테이너 실행시 구성변경이 이루어지지 않았습니다.</li>\n</ul>\n<p>이런경우 배포는 영원히 수행됩니다. 시스템을 치료하려면 현재 배포의 문제를 해결하고 새로운 배포를 적용해야합니다.</p>\n<h2>/v2/deployments endpoint</h2>\n<p>실행중인 배포목록은 /v2/deployments endpoint를 통해 엑세스할 수 있습니다. 모든 배포에 사용할 수 있는 몇가지 정보가 있습니다.</p>\n<ul>\n<li>affectedApps: 이 배포의 영향을 받는 어플리케이션</li>\n<li>steps: 이 배포를 위해 수행할 단계입니다</li>\n<li>currentStep: 현재 수행하고 있는 단계.</li>\n</ul>\n<p>모든 단계는 몇가지 액션들을 가지고 있습니다. 단계 내 액션들은 동시에 수행됩니다. 가능한 액션은 다음과같다</p>\n<ul>\n<li>StartApplication: 지정된 어플리케이션을 시작하십시오.</li>\n<li>StopApplication: 지정된 어플리케이션을 중지하십시오.</li>\n<li>ScaleApplication: 지정된 어플리케이션의 크기를 조정합니다.</li>\n<li>RestartApplication: 지정된 어플리케이션을 minimumHealthCapacity</li>\n<li>KillAllOldTasksOf: 지정된 어플리케이션의 나머지작업을 종료.</li>\n</ul>\n"},{"title":"shell-script-1","catalog":true,"date":"2018-02-01T02:45:53.000Z","subtitle":null,"header-img":null,"_content":"# 유닉스 리눅스 쉘스크립트 공부\n\n> 서버 프로그래머로 프로젝트를 진행하다보니 배포과정에서 쉘스크립트에 대한 공부를 좀 해야겠다는  \n생각이 들었습니다. 특히 bash에 대한 이해가 뒷받침 된다면 원격지에 있는 서버에 대한 컨트롤이 용이해  \n진다는 것은 팩트. 레츠고;;\n\nhttps://opentutorials.org/course/2598/14204\n생활코딩 쉘스크립트 기본 강좌를 듣고 오시는 것도 큰도움\n\n```bash\necho $0\n--bash\n```\n터미널에 위 명령어를 실행시키면 해당 터미널이 무슨 쉘인지 알수 있습니다.\nBash도 일종의 프로그램입니다.\n우리는 이 bash를 통해 컴퓨터, 좀 더 자세히는 커널에 명령을 내릴 수 있습니다.\n다른 종류의 쉘프로그램인 zsh도 있습니다.\n\n---\n\n## read 명령어\n`read` 명령어는 사용자가 키보드를 사용해 입력하면\n해당 값을 읽어와서 변수에 저장합니다.\n\n```bash\n# vi read.sh\necho -n \"Enter your ID: \"\nread id\n\necho \"Now your ID is $id\"\n```\n\n*echo -n옵션을 사용한다면 줄바꿈 없이 메세지를 출력할 수 있습니다*\n![ho](screenshot.png)\n여러입력을 받고 싶다면 스페이스로 구분지어 입력받을 수 있습니다.\n\n```bash\nread id name pswd\necho \"your name is $name\"\n```\n\n---\n## echo_back 명령어\n\n맥의 터미널을 처음 접했을때\n비밀번호가 타이핑되지않고 아무것도 보여주지않아서 혼란스러웠던적이 있었습니다\n'왜 안쳐지지...?'\n하지만 뒤에서 쳐지고있는거였죠. 안보일뿐!\n\n`에코백`은 사용자가 암호를 입력하는 처리에서 화면에 표시하지 않고자할때 쓰입니다.\n누군가 화면을 훔쳐볼 가능성이 있기 때문에\n보안상 에코백을 끄는(off)게 보통입니다\n\n생각보다 엄청간단해요!\n\n```bash\n# vi pass_wget.sh\nusername=guest\nhostname=localhost\n\necho -n \"Password: \"\nstty -echo # 에코백을 끕니다\nread password\nstty echo # 에코백을 이제 킵니다. 설정이 남아있기때문이죠\n\necho\n\n# wget이 설치되어 있는 경우\nwget -q --password=\"$password\" \"ftp://${username}@{hostname}/filename.txt\"\n# 맥의 경우, wget이 설치되어있지 않습니다. 그럴경우 curl명령어를 활용합니다\ncurl -s -u \"${username}:${password}\" -0 \"ftp://${hostname}/filename.txt\"\n```\n\n입력한 암호를 통해 ftp서버에서 파일을 내려받습니다.\nwget의 -q옵션(quiet모드)을 통해 동작상태가 출력되지 않도록 파일 내려받기만 하도록 지정합니다.\n\n\n---\n## 사용자 키입력을 한글자만 받아내기\n터미널을 통해 파일들을 다운받는 행위를 할때면 사용자의 동의를 구하곤합니다.\n```bash\nType Your Answer [y/n]:\n```\n이런화면을 자주만나죠\n한번 구현해보겠습니다\n```bash\n#vi getchar.sh\n\necho -n \"Type your answer [y/n]: \"\n# 현재 터미널의 설정을 셀변수에 백업\n# 터미널을 raw설정합니다.\ntty_state=$(stty -g)\nstty raw\n# 키보드에서 문자하나 읽기\nchar=$(dd bs=1 count=1 2> /dev/null)\n# 터미널 설정을 원래대로 돌림\nstty \"$tty_state\"\n\necho\n\ncase \"$char\" in\n  [yY])\n  echo \"input: Yes\"\n  ;;\n  [nN])\n  echo \"input: no\"\n  ;;\n  *)\n  echo \"input WTF\"\n  ;;\nesac\n\n```\n\n에코백 예제와 비슷하게\n상태를 되돌리는 것이 중요합니다.\n현재 터미널의 상태를 쉘변수에 백업해둡니다. `(tty_state)`\n`stty` 명령어는 터미널(단말) 상태를 설정하는 명령어입니다.\n`stty raw`를 통해 터미널을 raw모드로 변경하면\n키 버퍼 처리를 하지 않아 문자마다 처리가 가능합니다.\n\n**현재 터미널 설정 표시**\n![josu](hoho.png)\n\nraw모드로 할경우 현재 터미널 설정이 지워지므로 저장을 꼭해야합니다!\n\n이어서 실제 키입력값은 다음 `dd`명령어에 직접 전달됩니다.\n\n> dd 명령어에서는 입출력의 블록크기를 1 (bs=1)\n입력에서 출력으로 복사하는 블록 수를 1(count=1)로 해서\n입력된 문자를 셸 변수 char에 설정합니다\n\n또한 dd 명령어 실행메세지는 필요없으므로 /dev/null로 리다이렉트해서 버립니다.\n이후 case문을 이용해 입력된 값에 따른 분기처리합니다~\n","source":"_posts/shell-script-1.md","raw":"---\ntitle: shell-script-1\ncatalog: true\ndate: 2018-02-01 11:45:53\nsubtitle:\nheader-img:\ntags:\n---\n# 유닉스 리눅스 쉘스크립트 공부\n\n> 서버 프로그래머로 프로젝트를 진행하다보니 배포과정에서 쉘스크립트에 대한 공부를 좀 해야겠다는  \n생각이 들었습니다. 특히 bash에 대한 이해가 뒷받침 된다면 원격지에 있는 서버에 대한 컨트롤이 용이해  \n진다는 것은 팩트. 레츠고;;\n\nhttps://opentutorials.org/course/2598/14204\n생활코딩 쉘스크립트 기본 강좌를 듣고 오시는 것도 큰도움\n\n```bash\necho $0\n--bash\n```\n터미널에 위 명령어를 실행시키면 해당 터미널이 무슨 쉘인지 알수 있습니다.\nBash도 일종의 프로그램입니다.\n우리는 이 bash를 통해 컴퓨터, 좀 더 자세히는 커널에 명령을 내릴 수 있습니다.\n다른 종류의 쉘프로그램인 zsh도 있습니다.\n\n---\n\n## read 명령어\n`read` 명령어는 사용자가 키보드를 사용해 입력하면\n해당 값을 읽어와서 변수에 저장합니다.\n\n```bash\n# vi read.sh\necho -n \"Enter your ID: \"\nread id\n\necho \"Now your ID is $id\"\n```\n\n*echo -n옵션을 사용한다면 줄바꿈 없이 메세지를 출력할 수 있습니다*\n![ho](screenshot.png)\n여러입력을 받고 싶다면 스페이스로 구분지어 입력받을 수 있습니다.\n\n```bash\nread id name pswd\necho \"your name is $name\"\n```\n\n---\n## echo_back 명령어\n\n맥의 터미널을 처음 접했을때\n비밀번호가 타이핑되지않고 아무것도 보여주지않아서 혼란스러웠던적이 있었습니다\n'왜 안쳐지지...?'\n하지만 뒤에서 쳐지고있는거였죠. 안보일뿐!\n\n`에코백`은 사용자가 암호를 입력하는 처리에서 화면에 표시하지 않고자할때 쓰입니다.\n누군가 화면을 훔쳐볼 가능성이 있기 때문에\n보안상 에코백을 끄는(off)게 보통입니다\n\n생각보다 엄청간단해요!\n\n```bash\n# vi pass_wget.sh\nusername=guest\nhostname=localhost\n\necho -n \"Password: \"\nstty -echo # 에코백을 끕니다\nread password\nstty echo # 에코백을 이제 킵니다. 설정이 남아있기때문이죠\n\necho\n\n# wget이 설치되어 있는 경우\nwget -q --password=\"$password\" \"ftp://${username}@{hostname}/filename.txt\"\n# 맥의 경우, wget이 설치되어있지 않습니다. 그럴경우 curl명령어를 활용합니다\ncurl -s -u \"${username}:${password}\" -0 \"ftp://${hostname}/filename.txt\"\n```\n\n입력한 암호를 통해 ftp서버에서 파일을 내려받습니다.\nwget의 -q옵션(quiet모드)을 통해 동작상태가 출력되지 않도록 파일 내려받기만 하도록 지정합니다.\n\n\n---\n## 사용자 키입력을 한글자만 받아내기\n터미널을 통해 파일들을 다운받는 행위를 할때면 사용자의 동의를 구하곤합니다.\n```bash\nType Your Answer [y/n]:\n```\n이런화면을 자주만나죠\n한번 구현해보겠습니다\n```bash\n#vi getchar.sh\n\necho -n \"Type your answer [y/n]: \"\n# 현재 터미널의 설정을 셀변수에 백업\n# 터미널을 raw설정합니다.\ntty_state=$(stty -g)\nstty raw\n# 키보드에서 문자하나 읽기\nchar=$(dd bs=1 count=1 2> /dev/null)\n# 터미널 설정을 원래대로 돌림\nstty \"$tty_state\"\n\necho\n\ncase \"$char\" in\n  [yY])\n  echo \"input: Yes\"\n  ;;\n  [nN])\n  echo \"input: no\"\n  ;;\n  *)\n  echo \"input WTF\"\n  ;;\nesac\n\n```\n\n에코백 예제와 비슷하게\n상태를 되돌리는 것이 중요합니다.\n현재 터미널의 상태를 쉘변수에 백업해둡니다. `(tty_state)`\n`stty` 명령어는 터미널(단말) 상태를 설정하는 명령어입니다.\n`stty raw`를 통해 터미널을 raw모드로 변경하면\n키 버퍼 처리를 하지 않아 문자마다 처리가 가능합니다.\n\n**현재 터미널 설정 표시**\n![josu](hoho.png)\n\nraw모드로 할경우 현재 터미널 설정이 지워지므로 저장을 꼭해야합니다!\n\n이어서 실제 키입력값은 다음 `dd`명령어에 직접 전달됩니다.\n\n> dd 명령어에서는 입출력의 블록크기를 1 (bs=1)\n입력에서 출력으로 복사하는 블록 수를 1(count=1)로 해서\n입력된 문자를 셸 변수 char에 설정합니다\n\n또한 dd 명령어 실행메세지는 필요없으므로 /dev/null로 리다이렉트해서 버립니다.\n이후 case문을 이용해 입력된 값에 따른 분기처리합니다~\n","slug":"shell-script-1","published":1,"updated":"2018-02-01T08:32:42.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3yp69k000erxtylqrj2z64","content":"<h1 id=\"유닉스-리눅스-쉘스크립트-공부\">유닉스 리눅스 쉘스크립트 공부</h1>\n<blockquote>\n<p>서버 프로그래머로 프로젝트를 진행하다보니 배포과정에서 쉘스크립트에 대한 공부를 좀 해야겠다는<br>\n생각이 들었습니다. 특히 bash에 대한 이해가 뒷받침 된다면 원격지에 있는 서버에 대한 컨트롤이 용이해<br>\n진다는 것은 팩트. 레츠고;;</p>\n</blockquote>\n<p><a href=\"https://opentutorials.org/course/2598/14204\" target=\"_blank\" rel=\"external\">https://opentutorials.org/course/2598/14204</a><br>\n생활코딩 쉘스크립트 기본 강좌를 듣고 오시는 것도 큰도움</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$0</span></div><div class=\"line\">--bash</div></pre></td></tr></table></figure>\n<p>터미널에 위 명령어를 실행시키면 해당 터미널이 무슨 쉘인지 알수 있습니다.<br>\nBash도 일종의 프로그램입니다.<br>\n우리는 이 bash를 통해 컴퓨터, 좀 더 자세히는 커널에 명령을 내릴 수 있습니다.<br>\n다른 종류의 쉘프로그램인 zsh도 있습니다.</p>\n<hr>\n<h2 id=\"read-명령어\">read 명령어</h2>\n<p><code>read</code> 명령어는 사용자가 키보드를 사용해 입력하면<br>\n해당 값을 읽어와서 변수에 저장합니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># vi read.sh</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">\"Enter your ID: \"</span></div><div class=\"line\"><span class=\"built_in\">read</span> id</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Now your ID is <span class=\"variable\">$id</span>\"</span></div></pre></td></tr></table></figure>\n<p><em>echo -n옵션을 사용한다면 줄바꿈 없이 메세지를 출력할 수 있습니다</em><br>\n<img src=\"screenshot.png\" alt=\"ho\"><br>\n여러입력을 받고 싶다면 스페이스로 구분지어 입력받을 수 있습니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">read</span> id name pswd</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"your name is <span class=\"variable\">$name</span>\"</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"echo_back-명령어\">echo_back 명령어</h2>\n<p>맥의 터미널을 처음 접했을때<br>\n비밀번호가 타이핑되지않고 아무것도 보여주지않아서 혼란스러웠던적이 있었습니다<br>\n’왜 안쳐지지…?'<br>\n하지만 뒤에서 쳐지고있는거였죠. 안보일뿐!</p>\n<p><code>에코백</code>은 사용자가 암호를 입력하는 처리에서 화면에 표시하지 않고자할때 쓰입니다.<br>\n누군가 화면을 훔쳐볼 가능성이 있기 때문에<br>\n보안상 에코백을 끄는(off)게 보통입니다</p>\n<p>생각보다 엄청간단해요!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># vi pass_wget.sh</span></div><div class=\"line\">username=guest</div><div class=\"line\">hostname=localhost</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">\"Password: \"</span></div><div class=\"line\">stty -<span class=\"built_in\">echo</span> <span class=\"comment\"># 에코백을 끕니다</span></div><div class=\"line\"><span class=\"built_in\">read</span> password</div><div class=\"line\">stty <span class=\"built_in\">echo</span> <span class=\"comment\"># 에코백을 이제 킵니다. 설정이 남아있기때문이죠</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># wget이 설치되어 있는 경우</span></div><div class=\"line\">wget -q --password=<span class=\"string\">\"<span class=\"variable\">$password</span>\"</span> <span class=\"string\">\"ftp://<span class=\"variable\">$&#123;username&#125;</span>@&#123;hostname&#125;/filename.txt\"</span></div><div class=\"line\"><span class=\"comment\"># 맥의 경우, wget이 설치되어있지 않습니다. 그럴경우 curl명령어를 활용합니다</span></div><div class=\"line\">curl -s -u <span class=\"string\">\"<span class=\"variable\">$&#123;username&#125;</span>:<span class=\"variable\">$&#123;password&#125;</span>\"</span> -0 <span class=\"string\">\"ftp://<span class=\"variable\">$&#123;hostname&#125;</span>/filename.txt\"</span></div></pre></td></tr></table></figure>\n<p>입력한 암호를 통해 ftp서버에서 파일을 내려받습니다.<br>\nwget의 -q옵션(quiet모드)을 통해 동작상태가 출력되지 않도록 파일 내려받기만 하도록 지정합니다.</p>\n<hr>\n<h2 id=\"사용자-키입력을-한글자만-받아내기\">사용자 키입력을 한글자만 받아내기</h2>\n<p>터미널을 통해 파일들을 다운받는 행위를 할때면 사용자의 동의를 구하곤합니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Type Your Answer [y/n]:</div></pre></td></tr></table></figure>\n<p>이런화면을 자주만나죠<br>\n한번 구현해보겠습니다</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#vi getchar.sh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">\"Type your answer [y/n]: \"</span></div><div class=\"line\"><span class=\"comment\"># 현재 터미널의 설정을 셀변수에 백업</span></div><div class=\"line\"><span class=\"comment\"># 터미널을 raw설정합니다.</span></div><div class=\"line\">tty_state=$(stty -g)</div><div class=\"line\">stty raw</div><div class=\"line\"><span class=\"comment\"># 키보드에서 문자하나 읽기</span></div><div class=\"line\">char=$(dd bs=1 count=1 2&gt; /dev/null)</div><div class=\"line\"><span class=\"comment\"># 터미널 설정을 원래대로 돌림</span></div><div class=\"line\">stty <span class=\"string\">\"<span class=\"variable\">$tty_state</span>\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$char</span>\"</span> <span class=\"keyword\">in</span></div><div class=\"line\">  [yY])</div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"input: Yes\"</span></div><div class=\"line\">  ;;</div><div class=\"line\">  [nN])</div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"input: no\"</span></div><div class=\"line\">  ;;</div><div class=\"line\">  *)</div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"input WTF\"</span></div><div class=\"line\">  ;;</div><div class=\"line\"><span class=\"keyword\">esac</span></div></pre></td></tr></table></figure>\n<p>에코백 예제와 비슷하게<br>\n상태를 되돌리는 것이 중요합니다.<br>\n현재 터미널의 상태를 쉘변수에 백업해둡니다. <code>(tty_state)</code><br>\n<code>stty</code> 명령어는 터미널(단말) 상태를 설정하는 명령어입니다.<br>\n<code>stty raw</code>를 통해 터미널을 raw모드로 변경하면<br>\n키 버퍼 처리를 하지 않아 문자마다 처리가 가능합니다.</p>\n<p><strong>현재 터미널 설정 표시</strong><br>\n<img src=\"hoho.png\" alt=\"josu\"></p>\n<p>raw모드로 할경우 현재 터미널 설정이 지워지므로 저장을 꼭해야합니다!</p>\n<p>이어서 실제 키입력값은 다음 <code>dd</code>명령어에 직접 전달됩니다.</p>\n<blockquote>\n<p>dd 명령어에서는 입출력의 블록크기를 1 (bs=1)<br>\n입력에서 출력으로 복사하는 블록 수를 1(count=1)로 해서<br>\n입력된 문자를 셸 변수 char에 설정합니다</p>\n</blockquote>\n<p>또한 dd 명령어 실행메세지는 필요없으므로 /dev/null로 리다이렉트해서 버립니다.<br>\n이후 case문을 이용해 입력된 값에 따른 분기처리합니다~</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>유닉스 리눅스 쉘스크립트 공부</h1>\n<blockquote>\n<p>서버 프로그래머로 프로젝트를 진행하다보니 배포과정에서 쉘스크립트에 대한 공부를 좀 해야겠다는<br>\n생각이 들었습니다. 특히 bash에 대한 이해가 뒷받침 된다면 원격지에 있는 서버에 대한 컨트롤이 용이해<br>\n진다는 것은 팩트. 레츠고;;</p>\n</blockquote>\n<p><a href=\"https://opentutorials.org/course/2598/14204\" target=\"_blank\" rel=\"external\">https://opentutorials.org/course/2598/14204</a><br>\n생활코딩 쉘스크립트 기본 강좌를 듣고 오시는 것도 큰도움</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$0</span></div><div class=\"line\">--bash</div></pre></td></tr></table></figure>\n<p>터미널에 위 명령어를 실행시키면 해당 터미널이 무슨 쉘인지 알수 있습니다.<br>\nBash도 일종의 프로그램입니다.<br>\n우리는 이 bash를 통해 컴퓨터, 좀 더 자세히는 커널에 명령을 내릴 수 있습니다.<br>\n다른 종류의 쉘프로그램인 zsh도 있습니다.</p>\n<hr>\n<h2>read 명령어</h2>\n<p><code>read</code> 명령어는 사용자가 키보드를 사용해 입력하면<br>\n해당 값을 읽어와서 변수에 저장합니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># vi read.sh</span></div><div class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">\"Enter your ID: \"</span></div><div class=\"line\"><span class=\"built_in\">read</span> id</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Now your ID is <span class=\"variable\">$id</span>\"</span></div></pre></td></tr></table></figure>\n<p><em>echo -n옵션을 사용한다면 줄바꿈 없이 메세지를 출력할 수 있습니다</em><br>\n<img src=\"screenshot.png\" alt=\"ho\"><br>\n여러입력을 받고 싶다면 스페이스로 구분지어 입력받을 수 있습니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">read</span> id name pswd</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"your name is <span class=\"variable\">$name</span>\"</span></div></pre></td></tr></table></figure>\n<hr>\n<h2>echo_back 명령어</h2>\n<p>맥의 터미널을 처음 접했을때<br>\n비밀번호가 타이핑되지않고 아무것도 보여주지않아서 혼란스러웠던적이 있었습니다<br>\n’왜 안쳐지지…?'<br>\n하지만 뒤에서 쳐지고있는거였죠. 안보일뿐!</p>\n<p><code>에코백</code>은 사용자가 암호를 입력하는 처리에서 화면에 표시하지 않고자할때 쓰입니다.<br>\n누군가 화면을 훔쳐볼 가능성이 있기 때문에<br>\n보안상 에코백을 끄는(off)게 보통입니다</p>\n<p>생각보다 엄청간단해요!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># vi pass_wget.sh</span></div><div class=\"line\">username=guest</div><div class=\"line\">hostname=localhost</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">\"Password: \"</span></div><div class=\"line\">stty -<span class=\"built_in\">echo</span> <span class=\"comment\"># 에코백을 끕니다</span></div><div class=\"line\"><span class=\"built_in\">read</span> password</div><div class=\"line\">stty <span class=\"built_in\">echo</span> <span class=\"comment\"># 에코백을 이제 킵니다. 설정이 남아있기때문이죠</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># wget이 설치되어 있는 경우</span></div><div class=\"line\">wget -q --password=<span class=\"string\">\"<span class=\"variable\">$password</span>\"</span> <span class=\"string\">\"ftp://<span class=\"variable\">$&#123;username&#125;</span>@&#123;hostname&#125;/filename.txt\"</span></div><div class=\"line\"><span class=\"comment\"># 맥의 경우, wget이 설치되어있지 않습니다. 그럴경우 curl명령어를 활용합니다</span></div><div class=\"line\">curl -s -u <span class=\"string\">\"<span class=\"variable\">$&#123;username&#125;</span>:<span class=\"variable\">$&#123;password&#125;</span>\"</span> -0 <span class=\"string\">\"ftp://<span class=\"variable\">$&#123;hostname&#125;</span>/filename.txt\"</span></div></pre></td></tr></table></figure>\n<p>입력한 암호를 통해 ftp서버에서 파일을 내려받습니다.<br>\nwget의 -q옵션(quiet모드)을 통해 동작상태가 출력되지 않도록 파일 내려받기만 하도록 지정합니다.</p>\n<hr>\n<h2>사용자 키입력을 한글자만 받아내기</h2>\n<p>터미널을 통해 파일들을 다운받는 행위를 할때면 사용자의 동의를 구하곤합니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Type Your Answer [y/n]:</div></pre></td></tr></table></figure>\n<p>이런화면을 자주만나죠<br>\n한번 구현해보겠습니다</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#vi getchar.sh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">\"Type your answer [y/n]: \"</span></div><div class=\"line\"><span class=\"comment\"># 현재 터미널의 설정을 셀변수에 백업</span></div><div class=\"line\"><span class=\"comment\"># 터미널을 raw설정합니다.</span></div><div class=\"line\">tty_state=$(stty -g)</div><div class=\"line\">stty raw</div><div class=\"line\"><span class=\"comment\"># 키보드에서 문자하나 읽기</span></div><div class=\"line\">char=$(dd bs=1 count=1 2&gt; /dev/null)</div><div class=\"line\"><span class=\"comment\"># 터미널 설정을 원래대로 돌림</span></div><div class=\"line\">stty <span class=\"string\">\"<span class=\"variable\">$tty_state</span>\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$char</span>\"</span> <span class=\"keyword\">in</span></div><div class=\"line\">  [yY])</div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"input: Yes\"</span></div><div class=\"line\">  ;;</div><div class=\"line\">  [nN])</div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"input: no\"</span></div><div class=\"line\">  ;;</div><div class=\"line\">  *)</div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"input WTF\"</span></div><div class=\"line\">  ;;</div><div class=\"line\"><span class=\"keyword\">esac</span></div></pre></td></tr></table></figure>\n<p>에코백 예제와 비슷하게<br>\n상태를 되돌리는 것이 중요합니다.<br>\n현재 터미널의 상태를 쉘변수에 백업해둡니다. <code>(tty_state)</code><br>\n<code>stty</code> 명령어는 터미널(단말) 상태를 설정하는 명령어입니다.<br>\n<code>stty raw</code>를 통해 터미널을 raw모드로 변경하면<br>\n키 버퍼 처리를 하지 않아 문자마다 처리가 가능합니다.</p>\n<p><strong>현재 터미널 설정 표시</strong><br>\n<img src=\"hoho.png\" alt=\"josu\"></p>\n<p>raw모드로 할경우 현재 터미널 설정이 지워지므로 저장을 꼭해야합니다!</p>\n<p>이어서 실제 키입력값은 다음 <code>dd</code>명령어에 직접 전달됩니다.</p>\n<blockquote>\n<p>dd 명령어에서는 입출력의 블록크기를 1 (bs=1)<br>\n입력에서 출력으로 복사하는 블록 수를 1(count=1)로 해서<br>\n입력된 문자를 셸 변수 char에 설정합니다</p>\n</blockquote>\n<p>또한 dd 명령어 실행메세지는 필요없으므로 /dev/null로 리다이렉트해서 버립니다.<br>\n이후 case문을 이용해 입력된 값에 따른 분기처리합니다~</p>\n"},{"title":"shell-script-2","catalog":true,"date":"2018-02-01T10:02:36.000Z","subtitle":null,"header-img":null,"_content":"","source":"_posts/shell-script-2.md","raw":"---\ntitle: shell-script-2\ncatalog: true\ndate: 2018-02-01 19:02:36\nsubtitle:\nheader-img:\ntags:\n---\n","slug":"shell-script-2","published":1,"updated":"2018-02-01T10:02:36.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3yp69l000grxtyxa1eqwn5","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[{"_id":"source/_posts/mesos-part-1/curl.png","slug":"curl.png","post":"cjf3yp69d000brxtya635nebr","modified":0,"renderable":0},{"_id":"source/_posts/golang-design-p-01/image1.png","slug":"image1.png","post":"cjf3yp68u0002rxtyqky4ko68","modified":0,"renderable":0},{"_id":"source/_posts/golang-design-p-02/screenshot.png","slug":"screenshot.png","post":"cjf3yp68z0004rxty0usk52c7","modified":0,"renderable":0},{"_id":"source/_posts/linux-1/screenshot.png","slug":"screenshot.png","post":"cjf3yp6980009rxtyp9uszuq8","modified":0,"renderable":0},{"_id":"source/_posts/mesos-part-2/dependency.png","slug":"dependency.png","post":"cjf3yp69j000drxtyxpm81l4b","modified":0,"renderable":0},{"_id":"source/_posts/shell-script-1/hoho.png","slug":"hoho.png","post":"cjf3yp69k000erxtylqrj2z64","modified":0,"renderable":0},{"_id":"source/_posts/shell-script-1/screenshot.png","slug":"screenshot.png","post":"cjf3yp69k000erxtylqrj2z64","modified":0,"renderable":0},{"_id":"source/_posts/mesos-part-1/basic-0.png","slug":"basic-0.png","post":"cjf3yp69d000brxtya635nebr","modified":0,"renderable":0},{"_id":"source/_posts/mesos-part-1/basic-3deploy.png","slug":"basic-3deploy.png","post":"cjf3yp69d000brxtya635nebr","modified":0,"renderable":0},{"_id":"source/_posts/mesos-part-1/basic3running.png","slug":"basic3running.png","post":"cjf3yp69d000brxtya635nebr","modified":0,"renderable":0},{"_id":"source/_posts/mesos-part-1/hellomarathon.png","slug":"hellomarathon.png","post":"cjf3yp69d000brxtya635nebr","modified":0,"renderable":0},{"_id":"source/_posts/mesos-part-1/screenshot.png","slug":"screenshot.png","post":"cjf3yp69d000brxtya635nebr","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjf3yp6910006rxtyg5xgif3h","tag_id":"cjf3yp6960008rxty0vnxjp91","_id":"cjf3yp69n000irxtymh8v33ml"},{"post_id":"cjf3yp6910006rxtyg5xgif3h","tag_id":"cjf3yp69e000crxty85o6udbh","_id":"cjf3yp69n000jrxtyb54httw2"},{"post_id":"cjf3yp6910006rxtyg5xgif3h","tag_id":"cjf3yp69k000frxtynp15pazv","_id":"cjf3yp69n000krxtyifvjvdoe"},{"post_id":"cjf3yp6910006rxtyg5xgif3h","tag_id":"cjf3yp69m000hrxtypx7hh0w3","_id":"cjf3yp69n000lrxty6izhthsa"}],"Tag":[{"name":"Array","_id":"cjf3yp6960008rxty0vnxjp91"},{"name":"forEach","_id":"cjf3yp69e000crxty85o6udbh"},{"name":"map","_id":"cjf3yp69k000frxtynp15pazv"},{"name":"filter","_id":"cjf3yp69m000hrxtypx7hh0w3"}]}}